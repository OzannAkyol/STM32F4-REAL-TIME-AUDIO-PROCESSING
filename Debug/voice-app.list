
voice-app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007284  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08007414  08007414  00008414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007560  08007560  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007560  08007560  00008560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007568  08007568  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007568  08007568  00008568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800756c  0800756c  0000856c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007570  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009010  2**0
                  CONTENTS
 10 .bss          00005bbc  20000010  20000010  00009010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005bcc  20005bcc  00009010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001785e  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047c6  00000000  00000000  0002089e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  00025068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea5  00000000  00000000  00026408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d33  00000000  00000000  000272ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ccf5  00000000  00000000  0004bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1631  00000000  00000000  00068cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0013a306  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d9c  00000000  00000000  0013a3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0013f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000d95  00000000  00000000  0013f1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  0013ff5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073fc 	.word	0x080073fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080073fc 	.word	0x080073fc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	4b10      	ldr	r3, [pc, #64]	@ (800050c <MX_DMA_Init+0x4c>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ce:	4a0f      	ldr	r2, [pc, #60]	@ (800050c <MX_DMA_Init+0x4c>)
 80004d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80004d6:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <MX_DMA_Init+0x4c>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2105      	movs	r1, #5
 80004e6:	200e      	movs	r0, #14
 80004e8:	f000 fd6f 	bl	8000fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80004ec:	200e      	movs	r0, #14
 80004ee:	f000 fd88 	bl	8001002 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2105      	movs	r1, #5
 80004f6:	2010      	movs	r0, #16
 80004f8:	f000 fd67 	bl	8000fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80004fc:	2010      	movs	r0, #16
 80004fe:	f000 fd80 	bl	8001002 <HAL_NVIC_EnableIRQ>

}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40023800 	.word	0x40023800

08000510 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of microphoneTask */
  microphoneTaskHandle = osThreadNew(_microphone_task, NULL, &microphoneTask_attributes);
 8000514:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <MX_FREERTOS_Init+0x38>)
 8000516:	2100      	movs	r1, #0
 8000518:	480c      	ldr	r0, [pc, #48]	@ (800054c <MX_FREERTOS_Init+0x3c>)
 800051a:	f003 fbe5 	bl	8003ce8 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0b      	ldr	r2, [pc, #44]	@ (8000550 <MX_FREERTOS_Init+0x40>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of signalProcess */
  signalProcessHandle = osThreadNew(_signal_processing_task, NULL, &signalProcess_attributes);
 8000524:	4a0b      	ldr	r2, [pc, #44]	@ (8000554 <MX_FREERTOS_Init+0x44>)
 8000526:	2100      	movs	r1, #0
 8000528:	480b      	ldr	r0, [pc, #44]	@ (8000558 <MX_FREERTOS_Init+0x48>)
 800052a:	f003 fbdd 	bl	8003ce8 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0a      	ldr	r2, [pc, #40]	@ (800055c <MX_FREERTOS_Init+0x4c>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of speakerTask */
  speakerTaskHandle = osThreadNew(_speaker_task, NULL, &speakerTask_attributes);
 8000534:	4a0a      	ldr	r2, [pc, #40]	@ (8000560 <MX_FREERTOS_Init+0x50>)
 8000536:	2100      	movs	r1, #0
 8000538:	480a      	ldr	r0, [pc, #40]	@ (8000564 <MX_FREERTOS_Init+0x54>)
 800053a:	f003 fbd5 	bl	8003ce8 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a09      	ldr	r2, [pc, #36]	@ (8000568 <MX_FREERTOS_Init+0x58>)
 8000542:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	08007458 	.word	0x08007458
 800054c:	0800056d 	.word	0x0800056d
 8000550:	2000002c 	.word	0x2000002c
 8000554:	0800747c 	.word	0x0800747c
 8000558:	08000583 	.word	0x08000583
 800055c:	20000030 	.word	0x20000030
 8000560:	080074a0 	.word	0x080074a0
 8000564:	08000599 	.word	0x08000599
 8000568:	20000034 	.word	0x20000034

0800056c <_microphone_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header__microphone_task */
void _microphone_task(void *argument)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _microphone_task */
  /* Infinite loop */
  microphone_task(argument);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f006 fa4f 	bl	8006a18 <microphone_task>
  /* USER CODE END _microphone_task */
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <_signal_processing_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__signal_processing_task */
void _signal_processing_task(void *argument)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _signal_processing_task */
  /* Infinite loop */
  signal_processing_task(argument);
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f006 fb12 	bl	8006bb4 <signal_processing_task>
  /* USER CODE END _signal_processing_task */
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <_speaker_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header__speaker_task */
void _speaker_task(void *argument)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN _speaker_task */
  /* Infinite loop */
  speaker_task(argument);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f006 fc13 	bl	8006dcc <speaker_task>
  /* USER CODE END _speaker_task */
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_GPIO_Init+0xb8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a26      	ldr	r2, [pc, #152]	@ (8000668 <MX_GPIO_Init+0xb8>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b24      	ldr	r3, [pc, #144]	@ (8000668 <MX_GPIO_Init+0xb8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <MX_GPIO_Init+0xb8>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000668 <MX_GPIO_Init+0xb8>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <MX_GPIO_Init+0xb8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <MX_GPIO_Init+0xb8>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a18      	ldr	r2, [pc, #96]	@ (8000668 <MX_GPIO_Init+0xb8>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <MX_GPIO_Init+0xb8>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_GPIO_Init+0xb8>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a11      	ldr	r2, [pc, #68]	@ (8000668 <MX_GPIO_Init+0xb8>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_GPIO_Init+0xb8>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_Pin|orange_Pin|red_Pin|blue_Pin
 8000636:	2200      	movs	r2, #0
 8000638:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800063c:	480b      	ldr	r0, [pc, #44]	@ (800066c <MX_GPIO_Init+0xbc>)
 800063e:	f001 fa07 	bl	8001a50 <HAL_GPIO_WritePin>
                          |CODEC_RESET_PIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = green_Pin|orange_Pin|red_Pin|blue_Pin
 8000642:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000646:	617b      	str	r3, [r7, #20]
                          |CODEC_RESET_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4804      	ldr	r0, [pc, #16]	@ (800066c <MX_GPIO_Init+0xbc>)
 800065c:	f001 f85c 	bl	8001718 <HAL_GPIO_Init>

}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	@ 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40020c00 	.word	0x40020c00

08000670 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000676:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <MX_I2C1_Init+0x54>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800067c:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <MX_I2C1_Init+0x58>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800068e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000692:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006ae:	f001 f9e9 	bl	8001a84 <HAL_I2C_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f000 fa90 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000038 	.word	0x20000038
 80006c4:	40005400 	.word	0x40005400
 80006c8:	000186a0 	.word	0x000186a0

080006cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a19      	ldr	r2, [pc, #100]	@ (8000750 <HAL_I2C_MspInit+0x84>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d12c      	bne.n	8000748 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <HAL_I2C_MspInit+0x88>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a17      	ldr	r2, [pc, #92]	@ (8000754 <HAL_I2C_MspInit+0x88>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <HAL_I2C_MspInit+0x88>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800070a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000710:	2312      	movs	r3, #18
 8000712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800071c:	2304      	movs	r3, #4
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	480c      	ldr	r0, [pc, #48]	@ (8000758 <HAL_I2C_MspInit+0x8c>)
 8000728:	f000 fff6 	bl	8001718 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <HAL_I2C_MspInit+0x88>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a07      	ldr	r2, [pc, #28]	@ (8000754 <HAL_I2C_MspInit+0x88>)
 8000736:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <HAL_I2C_MspInit+0x88>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40005400 	.word	0x40005400
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400

0800075c <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_I2S2_Init+0x54>)
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <MX_I2S2_Init+0x58>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2S2_Init+0x54>)
 8000768:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800076c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_I2S2_Init+0x54>)
 8000770:	2210      	movs	r2, #16
 8000772:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000774:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_I2S2_Init+0x54>)
 8000776:	2203      	movs	r2, #3
 8000778:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <MX_I2S2_Init+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000780:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_I2S2_Init+0x54>)
 8000782:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000786:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_I2S2_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_I2S2_Init+0x54>)
 8000790:	2200      	movs	r2, #0
 8000792:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_I2S2_Init+0x54>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_I2S2_Init+0x54>)
 800079c:	f001 fe20 	bl	80023e0 <HAL_I2S_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80007a6:	f000 fa19 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	40003800 	.word	0x40003800

080007b8 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007bc:	4b13      	ldr	r3, [pc, #76]	@ (800080c <MX_I2S3_Init+0x54>)
 80007be:	4a14      	ldr	r2, [pc, #80]	@ (8000810 <MX_I2S3_Init+0x58>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007c2:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_I2S3_Init+0x54>)
 80007c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_MSB;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_I2S3_Init+0x54>)
 80007cc:	2210      	movs	r2, #16
 80007ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_I2S3_Init+0x54>)
 80007d2:	2203      	movs	r2, #3
 80007d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <MX_I2S3_Init+0x54>)
 80007d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_I2S3_Init+0x54>)
 80007e0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80007e4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_I2S3_Init+0x54>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_I2S3_Init+0x54>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_I2S3_Init+0x54>)
 80007fa:	f001 fdf1 	bl	80023e0 <HAL_I2S_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000804:	f000 f9ea 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000d4 	.word	0x200000d4
 8000810:	40003c00 	.word	0x40003c00

08000814 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	@ 0x38
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a82      	ldr	r2, [pc, #520]	@ (8000a3c <HAL_I2S_MspInit+0x228>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d17c      	bne.n	8000930 <HAL_I2S_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
 800083a:	4b81      	ldr	r3, [pc, #516]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	4a80      	ldr	r2, [pc, #512]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000844:	6413      	str	r3, [r2, #64]	@ 0x40
 8000846:	4b7e      	ldr	r3, [pc, #504]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084e:	623b      	str	r3, [r7, #32]
 8000850:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
 8000856:	4b7a      	ldr	r3, [pc, #488]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a79      	ldr	r2, [pc, #484]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b77      	ldr	r3, [pc, #476]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	4b73      	ldr	r3, [pc, #460]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a72      	ldr	r2, [pc, #456]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b70      	ldr	r3, [pc, #448]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800088a:	2308      	movs	r3, #8
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089a:	2305      	movs	r3, #5
 800089c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	4867      	ldr	r0, [pc, #412]	@ (8000a44 <HAL_I2S_MspInit+0x230>)
 80008a6:	f000 ff37 	bl	8001718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80008aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b0:	2302      	movs	r3, #2
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008bc:	2305      	movs	r3, #5
 80008be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c4:	4619      	mov	r1, r3
 80008c6:	4860      	ldr	r0, [pc, #384]	@ (8000a48 <HAL_I2S_MspInit+0x234>)
 80008c8:	f000 ff26 	bl	8001718 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80008cc:	4b5f      	ldr	r3, [pc, #380]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 80008ce:	4a60      	ldr	r2, [pc, #384]	@ (8000a50 <HAL_I2S_MspInit+0x23c>)
 80008d0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80008d2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d8:	4b5c      	ldr	r3, [pc, #368]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008de:	4b5b      	ldr	r3, [pc, #364]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008e4:	4b59      	ldr	r3, [pc, #356]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 80008e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008ea:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008ec:	4b57      	ldr	r3, [pc, #348]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 80008ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008f2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008f4:	4b55      	ldr	r3, [pc, #340]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 80008f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008fa:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80008fc:	4b53      	ldr	r3, [pc, #332]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 80008fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000902:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000904:	4b51      	ldr	r3, [pc, #324]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 8000906:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800090a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800090c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000912:	484e      	ldr	r0, [pc, #312]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 8000914:	f000 fb90 	bl	8001038 <HAL_DMA_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 800091e:	f000 f95d 	bl	8000bdc <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a49      	ldr	r2, [pc, #292]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 8000926:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000928:	4a48      	ldr	r2, [pc, #288]	@ (8000a4c <HAL_I2S_MspInit+0x238>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800092e:	e080      	b.n	8000a32 <HAL_I2S_MspInit+0x21e>
  else if(i2sHandle->Instance==SPI3)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a47      	ldr	r2, [pc, #284]	@ (8000a54 <HAL_I2S_MspInit+0x240>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d17b      	bne.n	8000a32 <HAL_I2S_MspInit+0x21e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	4b40      	ldr	r3, [pc, #256]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	4a3f      	ldr	r2, [pc, #252]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000948:	6413      	str	r3, [r2, #64]	@ 0x40
 800094a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b39      	ldr	r3, [pc, #228]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a38      	ldr	r2, [pc, #224]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b36      	ldr	r3, [pc, #216]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b32      	ldr	r3, [pc, #200]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a31      	ldr	r2, [pc, #196]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <HAL_I2S_MspInit+0x22c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800098e:	2310      	movs	r3, #16
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800099e:	2306      	movs	r3, #6
 80009a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	482b      	ldr	r0, [pc, #172]	@ (8000a58 <HAL_I2S_MspInit+0x244>)
 80009aa:	f000 feb5 	bl	8001718 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80009ae:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009c0:	2306      	movs	r3, #6
 80009c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c8:	4619      	mov	r1, r3
 80009ca:	481e      	ldr	r0, [pc, #120]	@ (8000a44 <HAL_I2S_MspInit+0x230>)
 80009cc:	f000 fea4 	bl	8001718 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80009d0:	4b22      	ldr	r3, [pc, #136]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 80009d2:	4a23      	ldr	r2, [pc, #140]	@ (8000a60 <HAL_I2S_MspInit+0x24c>)
 80009d4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80009d6:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 80009de:	2240      	movs	r2, #64	@ 0x40
 80009e0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 80009ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009ee:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 80009f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009f6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 80009fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009fe:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000a00:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 8000a02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a06:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 8000a0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a0e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000a16:	4811      	ldr	r0, [pc, #68]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 8000a18:	f000 fb0e 	bl	8001038 <HAL_DMA_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_I2S_MspInit+0x212>
      Error_Handler();
 8000a22:	f000 f8db 	bl	8000bdc <Error_Handler>
    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a0c      	ldr	r2, [pc, #48]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 8000a2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a5c <HAL_I2S_MspInit+0x248>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000a32:	bf00      	nop
 8000a34:	3738      	adds	r7, #56	@ 0x38
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40003800 	.word	0x40003800
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	2000011c 	.word	0x2000011c
 8000a50:	40026058 	.word	0x40026058
 8000a54:	40003c00 	.word	0x40003c00
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	2000017c 	.word	0x2000017c
 8000a60:	40026088 	.word	0x40026088

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 f962 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 f832 	bl	8000ad4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a70:	f000 f898 	bl	8000ba4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f7ff fd9c 	bl	80005b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a78:	f7ff fd22 	bl	80004c0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a7c:	f7ff fdf8 	bl	8000670 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a80:	f7ff fe6c 	bl	800075c <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a84:	f7ff fe98 	bl	80007b8 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  if(!init_signal_processing_task_notification()){
 8000a88:	f006 f836 	bl	8006af8 <init_signal_processing_task_notification>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f083 0301 	eor.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <main+0x38>
    Error_Handler();
 8000a98:	f000 f8a0 	bl	8000bdc <Error_Handler>
  }
  if(!init_microphone_task_notification()){
 8000a9c:	f005 ffa6 	bl	80069ec <init_microphone_task_notification>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	f083 0301 	eor.w	r3, r3, #1
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <main+0x4c>
    Error_Handler();
 8000aac:	f000 f896 	bl	8000bdc <Error_Handler>
  }
  if(!init_speaker_task_notification()){
 8000ab0:	f006 f92e 	bl	8006d10 <init_speaker_task_notification>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	f083 0301 	eor.w	r3, r3, #1
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <main+0x60>
    Error_Handler();
 8000ac0:	f000 f88c 	bl	8000bdc <Error_Handler>
  }
  
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ac4:	f003 f8c6 	bl	8003c54 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000ac8:	f7ff fd22 	bl	8000510 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000acc:	f003 f8e6 	bl	8003c9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <main+0x6c>

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b094      	sub	sp, #80	@ 0x50
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	2230      	movs	r2, #48	@ 0x30
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f006 fc50 	bl	8007388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <SystemClock_Config+0xc8>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	4a26      	ldr	r2, [pc, #152]	@ (8000b9c <SystemClock_Config+0xc8>)
 8000b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b08:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <SystemClock_Config+0xc8>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	4b21      	ldr	r3, [pc, #132]	@ (8000ba0 <SystemClock_Config+0xcc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a20      	ldr	r2, [pc, #128]	@ (8000ba0 <SystemClock_Config+0xcc>)
 8000b1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba0 <SystemClock_Config+0xcc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b30:	2302      	movs	r3, #2
 8000b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b34:	2301      	movs	r3, #1
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b44:	2308      	movs	r3, #8
 8000b46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000b48:	2354      	movs	r3, #84	@ 0x54
 8000b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b50:	2304      	movs	r3, #4
 8000b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b54:	f107 0320 	add.w	r3, r7, #32
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f002 fac1 	bl	80030e0 <HAL_RCC_OscConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b64:	f000 f83a 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b68:	230f      	movs	r3, #15
 8000b6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	2102      	movs	r1, #2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 fd23 	bl	80035d0 <HAL_RCC_ClockConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b90:	f000 f824 	bl	8000bdc <Error_Handler>
  }
}
 8000b94:	bf00      	nop
 8000b96:	3750      	adds	r7, #80	@ 0x50
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40007000 	.word	0x40007000

08000ba4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000baa:	463b      	mov	r3, r7
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 180;
 8000bba:	23b4      	movs	r3, #180	@ 0xb4
 8000bbc:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 fecf 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000bd0:	f000 f804 	bl	8000bdc <Error_Handler>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <Error_Handler+0x8>

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <HAL_MspInit+0x54>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf6:	4a11      	ldr	r2, [pc, #68]	@ (8000c3c <HAL_MspInit+0x54>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_MspInit+0x54>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <HAL_MspInit+0x54>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <HAL_MspInit+0x54>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <HAL_MspInit+0x54>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	210f      	movs	r1, #15
 8000c2a:	f06f 0001 	mvn.w	r0, #1
 8000c2e:	f000 f9cc 	bl	8000fca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7a:	f000 f8ab 	bl	8000dd4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c7e:	f004 fcd7 	bl	8005630 <xTaskGetSchedulerState>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d001      	beq.n	8000c8c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c88:	f005 face 	bl	8006228 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000c94:	4802      	ldr	r0, [pc, #8]	@ (8000ca0 <DMA1_Stream3_IRQHandler+0x10>)
 8000c96:	f000 fad5 	bl	8001244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000011c 	.word	0x2000011c

08000ca4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000ca8:	4802      	ldr	r0, [pc, #8]	@ (8000cb4 <DMA1_Stream5_IRQHandler+0x10>)
 8000caa:	f000 facb 	bl	8001244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000017c 	.word	0x2000017c

08000cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ce0:	f7ff ffea 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f006 fb45 	bl	8007398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0e:	f7ff fea9 	bl	8000a64 <main>
  bx  lr    
 8000d12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d20:	08007570 	.word	0x08007570
  ldr r2, =_sbss
 8000d24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d28:	20005bcc 	.word	0x20005bcc

08000d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d34:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <HAL_Init+0x40>)
 8000d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d40:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <HAL_Init+0x40>)
 8000d46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <HAL_Init+0x40>)
 8000d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f92b 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff ff40 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023c00 	.word	0x40023c00

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f943 	bl	800101e <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f90b 	bl	8000fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	@ (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	200001dc 	.word	0x200001dc

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200001dc 	.word	0x200001dc

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4907      	ldr	r1, [pc, #28]	@ (8000eb0 <__NVIC_EnableIRQ+0x38>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	@ (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	@ (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	@ 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	@ 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff8e 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff29 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff3e 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff8e 	bl	8000f08 <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff31 	bl	8000e78 <__NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffa2 	bl	8000f70 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff feda 	bl	8000dfc <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e099      	b.n	8001188 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2202      	movs	r2, #2
 8001058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0201 	bic.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001074:	e00f      	b.n	8001096 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001076:	f7ff fec1 	bl	8000dfc <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b05      	cmp	r3, #5
 8001082:	d908      	bls.n	8001096 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2220      	movs	r2, #32
 8001088:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2203      	movs	r2, #3
 800108e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e078      	b.n	8001188 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e8      	bne.n	8001076 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	4b38      	ldr	r3, [pc, #224]	@ (8001190 <HAL_DMA_Init+0x158>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d107      	bne.n	8001100 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f8:	4313      	orrs	r3, r2
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f023 0307 	bic.w	r3, r3, #7
 8001116:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	4313      	orrs	r3, r2
 8001120:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001126:	2b04      	cmp	r3, #4
 8001128:	d117      	bne.n	800115a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4313      	orrs	r3, r2
 8001132:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00e      	beq.n	800115a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 fa6f 	bl	8001620 <DMA_CheckFifoParam>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2240      	movs	r2, #64	@ 0x40
 800114c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001156:	2301      	movs	r3, #1
 8001158:	e016      	b.n	8001188 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fa26 	bl	80015b4 <DMA_CalcBaseAndBitshift>
 8001168:	4603      	mov	r3, r0
 800116a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001170:	223f      	movs	r2, #63	@ 0x3f
 8001172:	409a      	lsls	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	f010803f 	.word	0xf010803f

08001194 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <HAL_DMA_Start_IT+0x26>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e040      	b.n	800123c <HAL_DMA_Start_IT+0xa8>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d12f      	bne.n	800122e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2202      	movs	r2, #2
 80011d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f000 f9b8 	bl	8001558 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ec:	223f      	movs	r2, #63	@ 0x3f
 80011ee:	409a      	lsls	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0216 	orr.w	r2, r2, #22
 8001202:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0208 	orr.w	r2, r2, #8
 800121a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0201 	orr.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	e005      	b.n	800123a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001236:	2302      	movs	r3, #2
 8001238:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800123a:	7dfb      	ldrb	r3, [r7, #23]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001250:	4b8e      	ldr	r3, [pc, #568]	@ (800148c <HAL_DMA_IRQHandler+0x248>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a8e      	ldr	r2, [pc, #568]	@ (8001490 <HAL_DMA_IRQHandler+0x24c>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0a9b      	lsrs	r3, r3, #10
 800125c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001262:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126e:	2208      	movs	r2, #8
 8001270:	409a      	lsls	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4013      	ands	r3, r2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d01a      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0204 	bic.w	r2, r2, #4
 8001296:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800129c:	2208      	movs	r2, #8
 800129e:	409a      	lsls	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b4:	2201      	movs	r2, #1
 80012b6:	409a      	lsls	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d012      	beq.n	80012e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00b      	beq.n	80012e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d2:	2201      	movs	r2, #1
 80012d4:	409a      	lsls	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012de:	f043 0202 	orr.w	r2, r3, #2
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ea:	2204      	movs	r2, #4
 80012ec:	409a      	lsls	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d012      	beq.n	800131c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00b      	beq.n	800131c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001308:	2204      	movs	r2, #4
 800130a:	409a      	lsls	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001314:	f043 0204 	orr.w	r2, r3, #4
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001320:	2210      	movs	r2, #16
 8001322:	409a      	lsls	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d043      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d03c      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133e:	2210      	movs	r2, #16
 8001340:	409a      	lsls	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d018      	beq.n	8001386 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d108      	bne.n	8001374 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d024      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
 8001372:	e01f      	b.n	80013b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001378:	2b00      	cmp	r3, #0
 800137a:	d01b      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	4798      	blx	r3
 8001384:	e016      	b.n	80013b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d107      	bne.n	80013a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0208 	bic.w	r2, r2, #8
 80013a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b8:	2220      	movs	r2, #32
 80013ba:	409a      	lsls	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 808f 	beq.w	80014e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0310 	and.w	r3, r3, #16
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 8087 	beq.w	80014e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013da:	2220      	movs	r2, #32
 80013dc:	409a      	lsls	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d136      	bne.n	800145c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0216 	bic.w	r2, r2, #22
 80013fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800140c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	2b00      	cmp	r3, #0
 8001414:	d103      	bne.n	800141e <HAL_DMA_IRQHandler+0x1da>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0208 	bic.w	r2, r2, #8
 800142c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001432:	223f      	movs	r2, #63	@ 0x3f
 8001434:	409a      	lsls	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800144e:	2b00      	cmp	r3, #0
 8001450:	d07e      	beq.n	8001550 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	4798      	blx	r3
        }
        return;
 800145a:	e079      	b.n	8001550 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01d      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10d      	bne.n	8001494 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147c:	2b00      	cmp	r3, #0
 800147e:	d031      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	4798      	blx	r3
 8001488:	e02c      	b.n	80014e4 <HAL_DMA_IRQHandler+0x2a0>
 800148a:	bf00      	nop
 800148c:	20000000 	.word	0x20000000
 8001490:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001498:	2b00      	cmp	r3, #0
 800149a:	d023      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	4798      	blx	r3
 80014a4:	e01e      	b.n	80014e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10f      	bne.n	80014d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0210 	bic.w	r2, r2, #16
 80014c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d032      	beq.n	8001552 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d022      	beq.n	800153e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2205      	movs	r2, #5
 80014fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	3301      	adds	r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	429a      	cmp	r2, r3
 800151a:	d307      	bcc.n	800152c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f2      	bne.n	8001510 <HAL_DMA_IRQHandler+0x2cc>
 800152a:	e000      	b.n	800152e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800152c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
 800154e:	e000      	b.n	8001552 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001550:	bf00      	nop
    }
  }
}
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001574:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b40      	cmp	r3, #64	@ 0x40
 8001584:	d108      	bne.n	8001598 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001596:	e007      	b.n	80015a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	60da      	str	r2, [r3, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	3b10      	subs	r3, #16
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <DMA_CalcBaseAndBitshift+0x64>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	091b      	lsrs	r3, r3, #4
 80015cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015ce:	4a13      	ldr	r2, [pc, #76]	@ (800161c <DMA_CalcBaseAndBitshift+0x68>)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d909      	bls.n	80015f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80015ea:	f023 0303 	bic.w	r3, r3, #3
 80015ee:	1d1a      	adds	r2, r3, #4
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80015f4:	e007      	b.n	8001606 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80015fe:	f023 0303 	bic.w	r3, r3, #3
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	aaaaaaab 	.word	0xaaaaaaab
 800161c:	080074dc 	.word	0x080074dc

08001620 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001630:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d11f      	bne.n	800167a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b03      	cmp	r3, #3
 800163e:	d856      	bhi.n	80016ee <DMA_CheckFifoParam+0xce>
 8001640:	a201      	add	r2, pc, #4	@ (adr r2, 8001648 <DMA_CheckFifoParam+0x28>)
 8001642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001646:	bf00      	nop
 8001648:	08001659 	.word	0x08001659
 800164c:	0800166b 	.word	0x0800166b
 8001650:	08001659 	.word	0x08001659
 8001654:	080016ef 	.word	0x080016ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d046      	beq.n	80016f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001668:	e043      	b.n	80016f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001672:	d140      	bne.n	80016f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001678:	e03d      	b.n	80016f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001682:	d121      	bne.n	80016c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b03      	cmp	r3, #3
 8001688:	d837      	bhi.n	80016fa <DMA_CheckFifoParam+0xda>
 800168a:	a201      	add	r2, pc, #4	@ (adr r2, 8001690 <DMA_CheckFifoParam+0x70>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016a7 	.word	0x080016a7
 8001698:	080016a1 	.word	0x080016a1
 800169c:	080016b9 	.word	0x080016b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
      break;
 80016a4:	e030      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d025      	beq.n	80016fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016b6:	e022      	b.n	80016fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80016c0:	d11f      	bne.n	8001702 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016c6:	e01c      	b.n	8001702 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d903      	bls.n	80016d6 <DMA_CheckFifoParam+0xb6>
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d003      	beq.n	80016dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016d4:	e018      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
      break;
 80016da:	e015      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00e      	beq.n	8001706 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
      break;
 80016ec:	e00b      	b.n	8001706 <DMA_CheckFifoParam+0xe6>
      break;
 80016ee:	bf00      	nop
 80016f0:	e00a      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      break;
 80016f2:	bf00      	nop
 80016f4:	e008      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      break;
 80016f6:	bf00      	nop
 80016f8:	e006      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      break;
 80016fa:	bf00      	nop
 80016fc:	e004      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      break;
 80016fe:	bf00      	nop
 8001700:	e002      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      break;   
 8001702:	bf00      	nop
 8001704:	e000      	b.n	8001708 <DMA_CheckFifoParam+0xe8>
      break;
 8001706:	bf00      	nop
    }
  } 
  
  return status; 
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	e16b      	b.n	8001a0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001734:	2201      	movs	r2, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	429a      	cmp	r2, r3
 800174e:	f040 815a 	bne.w	8001a06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d005      	beq.n	800176a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001766:	2b02      	cmp	r3, #2
 8001768:	d130      	bne.n	80017cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 0201 	and.w	r2, r3, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d017      	beq.n	8001808 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d123      	bne.n	800185c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	08da      	lsrs	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3208      	adds	r2, #8
 8001856:	69b9      	ldr	r1, [r7, #24]
 8001858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0203 	and.w	r2, r3, #3
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80b4 	beq.w	8001a06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b60      	ldr	r3, [pc, #384]	@ (8001a24 <HAL_GPIO_Init+0x30c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001a24 <HAL_GPIO_Init+0x30c>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001a24 <HAL_GPIO_Init+0x30c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001a28 <HAL_GPIO_Init+0x310>)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3302      	adds	r3, #2
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a52      	ldr	r2, [pc, #328]	@ (8001a2c <HAL_GPIO_Init+0x314>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d02b      	beq.n	800193e <HAL_GPIO_Init+0x226>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a51      	ldr	r2, [pc, #324]	@ (8001a30 <HAL_GPIO_Init+0x318>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d025      	beq.n	800193a <HAL_GPIO_Init+0x222>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a50      	ldr	r2, [pc, #320]	@ (8001a34 <HAL_GPIO_Init+0x31c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01f      	beq.n	8001936 <HAL_GPIO_Init+0x21e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001a38 <HAL_GPIO_Init+0x320>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d019      	beq.n	8001932 <HAL_GPIO_Init+0x21a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4e      	ldr	r2, [pc, #312]	@ (8001a3c <HAL_GPIO_Init+0x324>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0x216>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4d      	ldr	r2, [pc, #308]	@ (8001a40 <HAL_GPIO_Init+0x328>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00d      	beq.n	800192a <HAL_GPIO_Init+0x212>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4c      	ldr	r2, [pc, #304]	@ (8001a44 <HAL_GPIO_Init+0x32c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d007      	beq.n	8001926 <HAL_GPIO_Init+0x20e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4b      	ldr	r2, [pc, #300]	@ (8001a48 <HAL_GPIO_Init+0x330>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_GPIO_Init+0x20a>
 800191e:	2307      	movs	r3, #7
 8001920:	e00e      	b.n	8001940 <HAL_GPIO_Init+0x228>
 8001922:	2308      	movs	r3, #8
 8001924:	e00c      	b.n	8001940 <HAL_GPIO_Init+0x228>
 8001926:	2306      	movs	r3, #6
 8001928:	e00a      	b.n	8001940 <HAL_GPIO_Init+0x228>
 800192a:	2305      	movs	r3, #5
 800192c:	e008      	b.n	8001940 <HAL_GPIO_Init+0x228>
 800192e:	2304      	movs	r3, #4
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x228>
 8001932:	2303      	movs	r3, #3
 8001934:	e004      	b.n	8001940 <HAL_GPIO_Init+0x228>
 8001936:	2302      	movs	r3, #2
 8001938:	e002      	b.n	8001940 <HAL_GPIO_Init+0x228>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x228>
 800193e:	2300      	movs	r3, #0
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f002 0203 	and.w	r2, r2, #3
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001950:	4935      	ldr	r1, [pc, #212]	@ (8001a28 <HAL_GPIO_Init+0x310>)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a4c <HAL_GPIO_Init+0x334>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001982:	4a32      	ldr	r2, [pc, #200]	@ (8001a4c <HAL_GPIO_Init+0x334>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001988:	4b30      	ldr	r3, [pc, #192]	@ (8001a4c <HAL_GPIO_Init+0x334>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ac:	4a27      	ldr	r2, [pc, #156]	@ (8001a4c <HAL_GPIO_Init+0x334>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b2:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <HAL_GPIO_Init+0x334>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a4c <HAL_GPIO_Init+0x334>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <HAL_GPIO_Init+0x334>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a00:	4a12      	ldr	r2, [pc, #72]	@ (8001a4c <HAL_GPIO_Init+0x334>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b0f      	cmp	r3, #15
 8001a10:	f67f ae90 	bls.w	8001734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3724      	adds	r7, #36	@ 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020c00 	.word	0x40020c00
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40021400 	.word	0x40021400
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40021c00 	.word	0x40021c00
 8001a4c:	40013c00 	.word	0x40013c00

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a6c:	e003      	b.n	8001a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	041a      	lsls	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e12b      	b.n	8001cee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fe0e 	bl	80006cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2224      	movs	r2, #36	@ 0x24
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ad6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ae8:	f001 ff2a 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8001aec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4a81      	ldr	r2, [pc, #516]	@ (8001cf8 <HAL_I2C_Init+0x274>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d807      	bhi.n	8001b08 <HAL_I2C_Init+0x84>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a80      	ldr	r2, [pc, #512]	@ (8001cfc <HAL_I2C_Init+0x278>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	bf94      	ite	ls
 8001b00:	2301      	movls	r3, #1
 8001b02:	2300      	movhi	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	e006      	b.n	8001b16 <HAL_I2C_Init+0x92>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d00 <HAL_I2C_Init+0x27c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	bf94      	ite	ls
 8001b10:	2301      	movls	r3, #1
 8001b12:	2300      	movhi	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0e7      	b.n	8001cee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4a78      	ldr	r2, [pc, #480]	@ (8001d04 <HAL_I2C_Init+0x280>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0c9b      	lsrs	r3, r3, #18
 8001b28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001cf8 <HAL_I2C_Init+0x274>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d802      	bhi.n	8001b58 <HAL_I2C_Init+0xd4>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	3301      	adds	r3, #1
 8001b56:	e009      	b.n	8001b6c <HAL_I2C_Init+0xe8>
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	4a69      	ldr	r2, [pc, #420]	@ (8001d08 <HAL_I2C_Init+0x284>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	099b      	lsrs	r3, r3, #6
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	430b      	orrs	r3, r1
 8001b72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	495c      	ldr	r1, [pc, #368]	@ (8001cf8 <HAL_I2C_Init+0x274>)
 8001b88:	428b      	cmp	r3, r1
 8001b8a:	d819      	bhi.n	8001bc0 <HAL_I2C_Init+0x13c>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1e59      	subs	r1, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b9a:	1c59      	adds	r1, r3, #1
 8001b9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ba0:	400b      	ands	r3, r1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00a      	beq.n	8001bbc <HAL_I2C_Init+0x138>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1e59      	subs	r1, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bba:	e051      	b.n	8001c60 <HAL_I2C_Init+0x1dc>
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	e04f      	b.n	8001c60 <HAL_I2C_Init+0x1dc>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d111      	bne.n	8001bec <HAL_I2C_Init+0x168>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1e58      	subs	r0, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	440b      	add	r3, r1
 8001bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	e012      	b.n	8001c12 <HAL_I2C_Init+0x18e>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e58      	subs	r0, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	0099      	lsls	r1, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_Init+0x196>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e022      	b.n	8001c60 <HAL_I2C_Init+0x1dc>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10e      	bne.n	8001c40 <HAL_I2C_Init+0x1bc>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1e58      	subs	r0, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6859      	ldr	r1, [r3, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	440b      	add	r3, r1
 8001c30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c3e:	e00f      	b.n	8001c60 <HAL_I2C_Init+0x1dc>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1e58      	subs	r0, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	0099      	lsls	r1, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	6809      	ldr	r1, [r1, #0]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6911      	ldr	r1, [r2, #16]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68d2      	ldr	r2, [r2, #12]
 8001c9a:	4311      	orrs	r1, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	000186a0 	.word	0x000186a0
 8001cfc:	001e847f 	.word	0x001e847f
 8001d00:	003d08ff 	.word	0x003d08ff
 8001d04:	431bde83 	.word	0x431bde83
 8001d08:	10624dd3 	.word	0x10624dd3

08001d0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	4608      	mov	r0, r1
 8001d16:	4611      	mov	r1, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	817b      	strh	r3, [r7, #10]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	813b      	strh	r3, [r7, #8]
 8001d22:	4613      	mov	r3, r2
 8001d24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d26:	f7ff f869 	bl	8000dfc <HAL_GetTick>
 8001d2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	f040 80d9 	bne.w	8001eec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2319      	movs	r3, #25
 8001d40:	2201      	movs	r2, #1
 8001d42:	496d      	ldr	r1, [pc, #436]	@ (8001ef8 <HAL_I2C_Mem_Write+0x1ec>)
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f971 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d50:	2302      	movs	r3, #2
 8001d52:	e0cc      	b.n	8001eee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_I2C_Mem_Write+0x56>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e0c5      	b.n	8001eee <HAL_I2C_Mem_Write+0x1e2>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d007      	beq.n	8001d88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2221      	movs	r2, #33	@ 0x21
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2240      	movs	r2, #64	@ 0x40
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a3a      	ldr	r2, [r7, #32]
 8001db2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a4d      	ldr	r2, [pc, #308]	@ (8001efc <HAL_I2C_Mem_Write+0x1f0>)
 8001dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dca:	88f8      	ldrh	r0, [r7, #6]
 8001dcc:	893a      	ldrh	r2, [r7, #8]
 8001dce:	8979      	ldrh	r1, [r7, #10]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	4603      	mov	r3, r0
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f890 	bl	8001f00 <I2C_RequestMemoryWrite>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d052      	beq.n	8001e8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e081      	b.n	8001eee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fa36 	bl	8002260 <I2C_WaitOnTXEFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00d      	beq.n	8001e16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d107      	bne.n	8001e12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e06b      	b.n	8001eee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d11b      	bne.n	8001e8c <HAL_I2C_Mem_Write+0x180>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d017      	beq.n	8001e8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1aa      	bne.n	8001dea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 fa29 	bl	80022f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d107      	bne.n	8001ebc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e016      	b.n	8001eee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001eec:	2302      	movs	r3, #2
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	00100002 	.word	0x00100002
 8001efc:	ffff0000 	.word	0xffff0000

08001f00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	4608      	mov	r0, r1
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4603      	mov	r3, r0
 8001f10:	817b      	strh	r3, [r7, #10]
 8001f12:	460b      	mov	r3, r1
 8001f14:	813b      	strh	r3, [r7, #8]
 8001f16:	4613      	mov	r3, r2
 8001f18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f878 	bl	800202c <I2C_WaitOnFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00d      	beq.n	8001f5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f50:	d103      	bne.n	8001f5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e05f      	b.n	800201e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f5e:	897b      	ldrh	r3, [r7, #10]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	6a3a      	ldr	r2, [r7, #32]
 8001f72:	492d      	ldr	r1, [pc, #180]	@ (8002028 <I2C_RequestMemoryWrite+0x128>)
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f8d3 	bl	8002120 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e04c      	b.n	800201e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f9c:	6a39      	ldr	r1, [r7, #32]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f95e 	bl	8002260 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00d      	beq.n	8001fc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d107      	bne.n	8001fc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e02b      	b.n	800201e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fcc:	893b      	ldrh	r3, [r7, #8]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	611a      	str	r2, [r3, #16]
 8001fd6:	e021      	b.n	800201c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fd8:	893b      	ldrh	r3, [r7, #8]
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe8:	6a39      	ldr	r1, [r7, #32]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f938 	bl	8002260 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00d      	beq.n	8002012 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d107      	bne.n	800200e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800200c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e005      	b.n	800201e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002012:	893b      	ldrh	r3, [r7, #8]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	00010002 	.word	0x00010002

0800202c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800203c:	e048      	b.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d044      	beq.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002046:	f7fe fed9 	bl	8000dfc <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d302      	bcc.n	800205c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d139      	bne.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d10d      	bne.n	8002082 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	43da      	mvns	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	4013      	ands	r3, r2
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	e00c      	b.n	800209c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	43da      	mvns	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4013      	ands	r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d116      	bne.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f043 0220 	orr.w	r2, r3, #32
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e023      	b.n	8002118 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	0c1b      	lsrs	r3, r3, #16
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d10d      	bne.n	80020f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	43da      	mvns	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4013      	ands	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	e00c      	b.n	8002110 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	43da      	mvns	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	4013      	ands	r3, r2
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	429a      	cmp	r2, r3
 8002114:	d093      	beq.n	800203e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800212e:	e071      	b.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800213e:	d123      	bne.n	8002188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800214e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002158:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	f043 0204 	orr.w	r2, r3, #4
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e067      	b.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218e:	d041      	beq.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002190:	f7fe fe34 	bl	8000dfc <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	429a      	cmp	r2, r3
 800219e:	d302      	bcc.n	80021a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d136      	bne.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	0c1b      	lsrs	r3, r3, #16
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10c      	bne.n	80021ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	43da      	mvns	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4013      	ands	r3, r2
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf14      	ite	ne
 80021c2:	2301      	movne	r3, #1
 80021c4:	2300      	moveq	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	e00b      	b.n	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	43da      	mvns	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4013      	ands	r3, r2
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf14      	ite	ne
 80021dc:	2301      	movne	r3, #1
 80021de:	2300      	moveq	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d016      	beq.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e021      	b.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	0c1b      	lsrs	r3, r3, #16
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10c      	bne.n	8002238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	43da      	mvns	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	4013      	ands	r3, r2
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e00b      	b.n	8002250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4013      	ands	r3, r2
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf14      	ite	ne
 800224a:	2301      	movne	r3, #1
 800224c:	2300      	moveq	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	f47f af6d 	bne.w	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800226c:	e034      	b.n	80022d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f886 	bl	8002380 <I2C_IsAcknowledgeFailed>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e034      	b.n	80022e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d028      	beq.n	80022d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002286:	f7fe fdb9 	bl	8000dfc <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	429a      	cmp	r2, r3
 8002294:	d302      	bcc.n	800229c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d11d      	bne.n	80022d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a6:	2b80      	cmp	r3, #128	@ 0x80
 80022a8:	d016      	beq.n	80022d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e007      	b.n	80022e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e2:	2b80      	cmp	r3, #128	@ 0x80
 80022e4:	d1c3      	bne.n	800226e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022fc:	e034      	b.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f83e 	bl	8002380 <I2C_IsAcknowledgeFailed>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e034      	b.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d028      	beq.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002316:	f7fe fd71 	bl	8000dfc <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	429a      	cmp	r2, r3
 8002324:	d302      	bcc.n	800232c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d11d      	bne.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b04      	cmp	r3, #4
 8002338:	d016      	beq.n	8002368 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e007      	b.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b04      	cmp	r3, #4
 8002374:	d1c3      	bne.n	80022fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002396:	d11b      	bne.n	80023d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	f043 0204 	orr.w	r2, r3, #4
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e128      	b.n	8002644 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a90      	ldr	r2, [pc, #576]	@ (800264c <HAL_I2S_Init+0x26c>)
 800240a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7fe fa01 	bl	8000814 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2202      	movs	r2, #2
 8002416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002428:	f023 030f 	bic.w	r3, r3, #15
 800242c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2202      	movs	r2, #2
 8002434:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d060      	beq.n	8002500 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002446:	2310      	movs	r3, #16
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	e001      	b.n	8002450 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b20      	cmp	r3, #32
 8002456:	d802      	bhi.n	800245e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800245e:	2001      	movs	r0, #1
 8002460:	f001 fb64 	bl	8003b2c <HAL_RCCEx_GetPeriphCLKFreq>
 8002464:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800246e:	d125      	bne.n	80024bc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d010      	beq.n	800249a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	461a      	mov	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	3305      	adds	r3, #5
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	e01f      	b.n	80024da <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	461a      	mov	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	3305      	adds	r3, #5
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	e00e      	b.n	80024da <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	461a      	mov	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d6:	3305      	adds	r3, #5
 80024d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002650 <HAL_I2S_Init+0x270>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	08db      	lsrs	r3, r3, #3
 80024e4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	e003      	b.n	8002508 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002500:	2302      	movs	r3, #2
 8002502:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d902      	bls.n	8002514 <HAL_I2S_Init+0x134>
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	2bff      	cmp	r3, #255	@ 0xff
 8002512:	d907      	bls.n	8002524 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002518:	f043 0210 	orr.w	r2, r3, #16
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e08f      	b.n	8002644 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	ea42 0103 	orr.w	r1, r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	430a      	orrs	r2, r1
 8002536:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002542:	f023 030f 	bic.w	r3, r3, #15
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6851      	ldr	r1, [r2, #4]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6892      	ldr	r2, [r2, #8]
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68d2      	ldr	r2, [r2, #12]
 8002554:	4311      	orrs	r1, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6992      	ldr	r2, [r2, #24]
 800255a:	430a      	orrs	r2, r1
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002566:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d161      	bne.n	8002634 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a38      	ldr	r2, [pc, #224]	@ (8002654 <HAL_I2S_Init+0x274>)
 8002574:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a37      	ldr	r2, [pc, #220]	@ (8002658 <HAL_I2S_Init+0x278>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_I2S_Init+0x1a4>
 8002580:	4b36      	ldr	r3, [pc, #216]	@ (800265c <HAL_I2S_Init+0x27c>)
 8002582:	e001      	b.n	8002588 <HAL_I2S_Init+0x1a8>
 8002584:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	4932      	ldr	r1, [pc, #200]	@ (8002658 <HAL_I2S_Init+0x278>)
 8002590:	428a      	cmp	r2, r1
 8002592:	d101      	bne.n	8002598 <HAL_I2S_Init+0x1b8>
 8002594:	4a31      	ldr	r2, [pc, #196]	@ (800265c <HAL_I2S_Init+0x27c>)
 8002596:	e001      	b.n	800259c <HAL_I2S_Init+0x1bc>
 8002598:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800259c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80025a0:	f023 030f 	bic.w	r3, r3, #15
 80025a4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002658 <HAL_I2S_Init+0x278>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d101      	bne.n	80025b4 <HAL_I2S_Init+0x1d4>
 80025b0:	4b2a      	ldr	r3, [pc, #168]	@ (800265c <HAL_I2S_Init+0x27c>)
 80025b2:	e001      	b.n	80025b8 <HAL_I2S_Init+0x1d8>
 80025b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025b8:	2202      	movs	r2, #2
 80025ba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a25      	ldr	r2, [pc, #148]	@ (8002658 <HAL_I2S_Init+0x278>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_I2S_Init+0x1ea>
 80025c6:	4b25      	ldr	r3, [pc, #148]	@ (800265c <HAL_I2S_Init+0x27c>)
 80025c8:	e001      	b.n	80025ce <HAL_I2S_Init+0x1ee>
 80025ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025da:	d003      	beq.n	80025e4 <HAL_I2S_Init+0x204>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d103      	bne.n	80025ec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80025e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	e001      	b.n	80025f0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80025fa:	4313      	orrs	r3, r2
 80025fc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002604:	4313      	orrs	r3, r2
 8002606:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800260e:	4313      	orrs	r3, r2
 8002610:	b29a      	uxth	r2, r3
 8002612:	897b      	ldrh	r3, [r7, #10]
 8002614:	4313      	orrs	r3, r2
 8002616:	b29b      	uxth	r3, r3
 8002618:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800261c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a0d      	ldr	r2, [pc, #52]	@ (8002658 <HAL_I2S_Init+0x278>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d101      	bne.n	800262c <HAL_I2S_Init+0x24c>
 8002628:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <HAL_I2S_Init+0x27c>)
 800262a:	e001      	b.n	8002630 <HAL_I2S_Init+0x250>
 800262c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002630:	897a      	ldrh	r2, [r7, #10]
 8002632:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3720      	adds	r7, #32
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	08002b17 	.word	0x08002b17
 8002650:	cccccccd 	.word	0xcccccccd
 8002654:	08002c2d 	.word	0x08002c2d
 8002658:	40003800 	.word	0x40003800
 800265c:	40003400 	.word	0x40003400

08002660 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	4613      	mov	r3, r2
 800266c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_I2S_Transmit_DMA+0x1a>
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e08a      	b.n	8002794 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
 800268c:	e082      	b.n	8002794 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_I2S_Transmit_DMA+0x3e>
 800269a:	2302      	movs	r3, #2
 800269c:	e07a      	b.n	8002794 <HAL_I2S_Transmit_DMA+0x134>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2203      	movs	r2, #3
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d002      	beq.n	80026d2 <HAL_I2S_Transmit_DMA+0x72>
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	d10a      	bne.n	80026e8 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026e6:	e005      	b.n	80026f4 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	88fa      	ldrh	r2, [r7, #6]
 80026ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	88fa      	ldrh	r2, [r7, #6]
 80026f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f8:	4a28      	ldr	r2, [pc, #160]	@ (800279c <HAL_I2S_Transmit_DMA+0x13c>)
 80026fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002700:	4a27      	ldr	r2, [pc, #156]	@ (80027a0 <HAL_I2S_Transmit_DMA+0x140>)
 8002702:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	4a26      	ldr	r2, [pc, #152]	@ (80027a4 <HAL_I2S_Transmit_DMA+0x144>)
 800270a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002714:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800271c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002722:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002724:	f7fe fd36 	bl	8001194 <HAL_DMA_Start_IT>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00f      	beq.n	800274e <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002732:	f043 0208 	orr.w	r2, r3, #8
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e022      	b.n	8002794 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d107      	bne.n	8002774 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0202 	orr.w	r2, r2, #2
 8002772:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277e:	2b00      	cmp	r3, #0
 8002780:	d107      	bne.n	8002792 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002790:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	08002997 	.word	0x08002997
 80027a0:	08002955 	.word	0x08002955
 80027a4:	08002a11 	.word	0x08002a11

080027a8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_I2S_Receive_DMA+0x1a>
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e09d      	b.n	8002902 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 80027d2:	2302      	movs	r3, #2
 80027d4:	e095      	b.n	8002902 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_I2S_Receive_DMA+0x3e>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e08d      	b.n	8002902 <HAL_I2S_Receive_DMA+0x15a>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2204      	movs	r2, #4
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d002      	beq.n	800281a <HAL_I2S_Receive_DMA+0x72>
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b05      	cmp	r3, #5
 8002818:	d10a      	bne.n	8002830 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	865a      	strh	r2, [r3, #50]	@ 0x32
 800282e:	e005      	b.n	800283c <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	88fa      	ldrh	r2, [r7, #6]
 8002834:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	88fa      	ldrh	r2, [r7, #6]
 800283a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002840:	4a32      	ldr	r2, [pc, #200]	@ (800290c <HAL_I2S_Receive_DMA+0x164>)
 8002842:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002848:	4a31      	ldr	r2, [pc, #196]	@ (8002910 <HAL_I2S_Receive_DMA+0x168>)
 800284a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002850:	4a30      	ldr	r2, [pc, #192]	@ (8002914 <HAL_I2S_Receive_DMA+0x16c>)
 8002852:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800285e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002862:	d10a      	bne.n	800287a <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	330c      	adds	r3, #12
 8002884:	4619      	mov	r1, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002890:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002892:	f7fe fc7f 	bl	8001194 <HAL_DMA_Start_IT>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00f      	beq.n	80028bc <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a0:	f043 0208 	orr.w	r2, r3, #8
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e022      	b.n	8002902 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d107      	bne.n	8002900 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69da      	ldr	r2, [r3, #28]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028fe:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	080029f5 	.word	0x080029f5
 8002910:	080029b3 	.word	0x080029b3
 8002914:	08002a11 	.word	0x08002a11

08002918 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002960:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10e      	bne.n	8002988 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0202 	bic.w	r2, r2, #2
 8002978:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f7ff ffcf 	bl	800292c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7ff ffb7 	bl	8002918 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029be:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10e      	bne.n	80029e6 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f004 f876 	bl	8006ad8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f004 f85e 	bl	8006ac4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0203 	bic.w	r2, r2, #3
 8002a2c:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a46:	f043 0208 	orr.w	r2, r3, #8
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f7ff ff76 	bl	8002940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	881a      	ldrh	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	1c9a      	adds	r2, r3, #2
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10e      	bne.n	8002ab0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002aa0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ff3e 	bl	800292c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aca:	b292      	uxth	r2, r2
 8002acc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	1c9a      	adds	r2, r3, #2
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10e      	bne.n	8002b0e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002afe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f003 ffe5 	bl	8006ad8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d13a      	bne.n	8002ba8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d109      	bne.n	8002b50 <I2S_IRQHandler+0x3a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b46:	2b40      	cmp	r3, #64	@ 0x40
 8002b48:	d102      	bne.n	8002b50 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ffb4 	bl	8002ab8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b56:	2b40      	cmp	r3, #64	@ 0x40
 8002b58:	d126      	bne.n	8002ba8 <I2S_IRQHandler+0x92>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d11f      	bne.n	8002ba8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	f043 0202 	orr.w	r2, r3, #2
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fecc 	bl	8002940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d136      	bne.n	8002c22 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d109      	bne.n	8002bd2 <I2S_IRQHandler+0xbc>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc8:	2b80      	cmp	r3, #128	@ 0x80
 8002bca:	d102      	bne.n	8002bd2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff45 	bl	8002a5c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d122      	bne.n	8002c22 <I2S_IRQHandler+0x10c>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	d11b      	bne.n	8002c22 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002bf8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c14:	f043 0204 	orr.w	r2, r3, #4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff fe8f 	bl	8002940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a92      	ldr	r2, [pc, #584]	@ (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c46:	4b92      	ldr	r3, [pc, #584]	@ (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c48:	e001      	b.n	8002c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a8b      	ldr	r2, [pc, #556]	@ (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d101      	bne.n	8002c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c64:	4b8a      	ldr	r3, [pc, #552]	@ (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c66:	e001      	b.n	8002c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c78:	d004      	beq.n	8002c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 8099 	bne.w	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d107      	bne.n	8002c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f925 	bl	8002ee8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9c8 	bl	8003048 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbe:	2b40      	cmp	r3, #64	@ 0x40
 8002cc0:	d13a      	bne.n	8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d035      	beq.n	8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002cd6:	4b6e      	ldr	r3, [pc, #440]	@ (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cd8:	e001      	b.n	8002cde <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002cda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4969      	ldr	r1, [pc, #420]	@ (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ce6:	428b      	cmp	r3, r1
 8002ce8:	d101      	bne.n	8002cee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002cea:	4b69      	ldr	r3, [pc, #420]	@ (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cec:	e001      	b.n	8002cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002cee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002cf2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002cf6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f043 0202 	orr.w	r2, r3, #2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff fe04 	bl	8002940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	f040 80c3 	bne.w	8002eca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80bd 	beq.w	8002eca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002d5e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a49      	ldr	r2, [pc, #292]	@ (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d6a:	4b49      	ldr	r3, [pc, #292]	@ (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d6c:	e001      	b.n	8002d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4944      	ldr	r1, [pc, #272]	@ (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d7a:	428b      	cmp	r3, r1
 8002d7c:	d101      	bne.n	8002d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d7e:	4b44      	ldr	r3, [pc, #272]	@ (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d80:	e001      	b.n	8002d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d8a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	f043 0204 	orr.w	r2, r3, #4
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fdc6 	bl	8002940 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002db4:	e089      	b.n	8002eca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d107      	bne.n	8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f8be 	bl	8002f4c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d107      	bne.n	8002dea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f8fd 	bl	8002fe4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df0:	2b40      	cmp	r3, #64	@ 0x40
 8002df2:	d12f      	bne.n	8002e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02a      	beq.n	8002e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e0c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1e      	ldr	r2, [pc, #120]	@ (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002e18:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e1a:	e001      	b.n	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002e1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4919      	ldr	r1, [pc, #100]	@ (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e28:	428b      	cmp	r3, r1
 8002e2a:	d101      	bne.n	8002e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e2c:	4b18      	ldr	r3, [pc, #96]	@ (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e2e:	e001      	b.n	8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e38:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f043 0202 	orr.w	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff fd76 	bl	8002940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d136      	bne.n	8002ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d031      	beq.n	8002ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a07      	ldr	r2, [pc, #28]	@ (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d101      	bne.n	8002e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e72:	4b07      	ldr	r3, [pc, #28]	@ (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e74:	e001      	b.n	8002e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4902      	ldr	r1, [pc, #8]	@ (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e82:	428b      	cmp	r3, r1
 8002e84:	d106      	bne.n	8002e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002e86:	4b02      	ldr	r3, [pc, #8]	@ (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e88:	e006      	b.n	8002e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002e8a:	bf00      	nop
 8002e8c:	40003800 	.word	0x40003800
 8002e90:	40003400 	.word	0x40003400
 8002e94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002e98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002e9c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002eac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f043 0204 	orr.w	r2, r3, #4
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fd3c 	bl	8002940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ec8:	e000      	b.n	8002ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002eca:	bf00      	nop
}
 8002ecc:	bf00      	nop
 8002ece:	3720      	adds	r7, #32
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	1c99      	adds	r1, r3, #2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6251      	str	r1, [r2, #36]	@ 0x24
 8002efa:	881a      	ldrh	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d113      	bne.n	8002f42 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002f28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d106      	bne.n	8002f42 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ffc9 	bl	8002ed4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	1c99      	adds	r1, r3, #2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6251      	str	r1, [r2, #36]	@ 0x24
 8002f5e:	8819      	ldrh	r1, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1d      	ldr	r2, [pc, #116]	@ (8002fdc <I2SEx_TxISR_I2SExt+0x90>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d101      	bne.n	8002f6e <I2SEx_TxISR_I2SExt+0x22>
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <I2SEx_TxISR_I2SExt+0x94>)
 8002f6c:	e001      	b.n	8002f72 <I2SEx_TxISR_I2SExt+0x26>
 8002f6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002f72:	460a      	mov	r2, r1
 8002f74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d121      	bne.n	8002fd2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a12      	ldr	r2, [pc, #72]	@ (8002fdc <I2SEx_TxISR_I2SExt+0x90>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d101      	bne.n	8002f9c <I2SEx_TxISR_I2SExt+0x50>
 8002f98:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <I2SEx_TxISR_I2SExt+0x94>)
 8002f9a:	e001      	b.n	8002fa0 <I2SEx_TxISR_I2SExt+0x54>
 8002f9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	490d      	ldr	r1, [pc, #52]	@ (8002fdc <I2SEx_TxISR_I2SExt+0x90>)
 8002fa8:	428b      	cmp	r3, r1
 8002faa:	d101      	bne.n	8002fb0 <I2SEx_TxISR_I2SExt+0x64>
 8002fac:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <I2SEx_TxISR_I2SExt+0x94>)
 8002fae:	e001      	b.n	8002fb4 <I2SEx_TxISR_I2SExt+0x68>
 8002fb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002fb4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002fb8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d106      	bne.n	8002fd2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff ff81 	bl	8002ed4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40003800 	.word	0x40003800
 8002fe0:	40003400 	.word	0x40003400

08002fe4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68d8      	ldr	r0, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	1c99      	adds	r1, r3, #2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002ffc:	b282      	uxth	r2, r0
 8002ffe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d113      	bne.n	8003040 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003026:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ff4a 	bl	8002ed4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a20      	ldr	r2, [pc, #128]	@ (80030d8 <I2SEx_RxISR_I2SExt+0x90>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d101      	bne.n	800305e <I2SEx_RxISR_I2SExt+0x16>
 800305a:	4b20      	ldr	r3, [pc, #128]	@ (80030dc <I2SEx_RxISR_I2SExt+0x94>)
 800305c:	e001      	b.n	8003062 <I2SEx_RxISR_I2SExt+0x1a>
 800305e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003062:	68d8      	ldr	r0, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	1c99      	adds	r1, r3, #2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800306e:	b282      	uxth	r2, r0
 8003070:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003076:	b29b      	uxth	r3, r3
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d121      	bne.n	80030ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a12      	ldr	r2, [pc, #72]	@ (80030d8 <I2SEx_RxISR_I2SExt+0x90>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d101      	bne.n	8003098 <I2SEx_RxISR_I2SExt+0x50>
 8003094:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <I2SEx_RxISR_I2SExt+0x94>)
 8003096:	e001      	b.n	800309c <I2SEx_RxISR_I2SExt+0x54>
 8003098:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	490d      	ldr	r1, [pc, #52]	@ (80030d8 <I2SEx_RxISR_I2SExt+0x90>)
 80030a4:	428b      	cmp	r3, r1
 80030a6:	d101      	bne.n	80030ac <I2SEx_RxISR_I2SExt+0x64>
 80030a8:	4b0c      	ldr	r3, [pc, #48]	@ (80030dc <I2SEx_RxISR_I2SExt+0x94>)
 80030aa:	e001      	b.n	80030b0 <I2SEx_RxISR_I2SExt+0x68>
 80030ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80030b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ff03 	bl	8002ed4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40003800 	.word	0x40003800
 80030dc:	40003400 	.word	0x40003400

080030e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e267      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d075      	beq.n	80031ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030fe:	4b88      	ldr	r3, [pc, #544]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d00c      	beq.n	8003124 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4b85      	ldr	r3, [pc, #532]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003112:	2b08      	cmp	r3, #8
 8003114:	d112      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003116:	4b82      	ldr	r3, [pc, #520]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800311e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003122:	d10b      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	4b7e      	ldr	r3, [pc, #504]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05b      	beq.n	80031e8 <HAL_RCC_OscConfig+0x108>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d157      	bne.n	80031e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e242      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003144:	d106      	bne.n	8003154 <HAL_RCC_OscConfig+0x74>
 8003146:	4b76      	ldr	r3, [pc, #472]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a75      	ldr	r2, [pc, #468]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e01d      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x98>
 800315e:	4b70      	ldr	r3, [pc, #448]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6f      	ldr	r2, [pc, #444]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	4b6d      	ldr	r3, [pc, #436]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6c      	ldr	r2, [pc, #432]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003178:	4b69      	ldr	r3, [pc, #420]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a68      	ldr	r2, [pc, #416]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800317e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b66      	ldr	r3, [pc, #408]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a65      	ldr	r2, [pc, #404]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800318a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800318e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fd fe30 	bl	8000dfc <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fd fe2c 	bl	8000dfc <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	@ 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e207      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0xc0>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fd fe1c 	bl	8000dfc <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fd fe18 	bl	8000dfc <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	@ 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1f3      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	4b51      	ldr	r3, [pc, #324]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0xe8>
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d063      	beq.n	80032be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b47      	ldr	r3, [pc, #284]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800320a:	2b08      	cmp	r3, #8
 800320c:	d11c      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b44      	ldr	r3, [pc, #272]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	4b41      	ldr	r3, [pc, #260]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1c7      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003232:	4b3b      	ldr	r3, [pc, #236]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4937      	ldr	r1, [pc, #220]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	e03a      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003250:	4b34      	ldr	r3, [pc, #208]	@ (8003324 <HAL_RCC_OscConfig+0x244>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fd fdd1 	bl	8000dfc <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325e:	f7fd fdcd 	bl	8000dfc <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e1a8      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	4b2b      	ldr	r3, [pc, #172]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327c:	4b28      	ldr	r3, [pc, #160]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4925      	ldr	r1, [pc, #148]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
 8003290:	e015      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003292:	4b24      	ldr	r3, [pc, #144]	@ (8003324 <HAL_RCC_OscConfig+0x244>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd fdb0 	bl	8000dfc <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a0:	f7fd fdac 	bl	8000dfc <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e187      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d036      	beq.n	8003338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d2:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <HAL_RCC_OscConfig+0x248>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fd fd90 	bl	8000dfc <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e0:	f7fd fd8c 	bl	8000dfc <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e167      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 80032f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x200>
 80032fe:	e01b      	b.n	8003338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003300:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <HAL_RCC_OscConfig+0x248>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003306:	f7fd fd79 	bl	8000dfc <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	e00e      	b.n	800332c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330e:	f7fd fd75 	bl	8000dfc <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d907      	bls.n	800332c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e150      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
 8003320:	40023800 	.word	0x40023800
 8003324:	42470000 	.word	0x42470000
 8003328:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332c:	4b88      	ldr	r3, [pc, #544]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ea      	bne.n	800330e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8097 	beq.w	8003474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334a:	4b81      	ldr	r3, [pc, #516]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10f      	bne.n	8003376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	4b7d      	ldr	r3, [pc, #500]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	4a7c      	ldr	r2, [pc, #496]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	@ 0x40
 8003366:	4b7a      	ldr	r3, [pc, #488]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003376:	4b77      	ldr	r3, [pc, #476]	@ (8003554 <HAL_RCC_OscConfig+0x474>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d118      	bne.n	80033b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003382:	4b74      	ldr	r3, [pc, #464]	@ (8003554 <HAL_RCC_OscConfig+0x474>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a73      	ldr	r2, [pc, #460]	@ (8003554 <HAL_RCC_OscConfig+0x474>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800338c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338e:	f7fd fd35 	bl	8000dfc <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7fd fd31 	bl	8000dfc <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e10c      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003554 <HAL_RCC_OscConfig+0x474>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x2ea>
 80033bc:	4b64      	ldr	r3, [pc, #400]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c0:	4a63      	ldr	r2, [pc, #396]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c8:	e01c      	b.n	8003404 <HAL_RCC_OscConfig+0x324>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x30c>
 80033d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033de:	4b5c      	ldr	r3, [pc, #368]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0x324>
 80033ec:	4b58      	ldr	r3, [pc, #352]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f0:	4a57      	ldr	r2, [pc, #348]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f8:	4b55      	ldr	r3, [pc, #340]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	4a54      	ldr	r2, [pc, #336]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033fe:	f023 0304 	bic.w	r3, r3, #4
 8003402:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d015      	beq.n	8003438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fd fcf6 	bl	8000dfc <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fd fcf2 	bl	8000dfc <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0cb      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342a:	4b49      	ldr	r3, [pc, #292]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ee      	beq.n	8003414 <HAL_RCC_OscConfig+0x334>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7fd fce0 	bl	8000dfc <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343e:	e00a      	b.n	8003456 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003440:	f7fd fcdc 	bl	8000dfc <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0b5      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003456:	4b3e      	ldr	r3, [pc, #248]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ee      	bne.n	8003440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b39      	ldr	r3, [pc, #228]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	4a38      	ldr	r2, [pc, #224]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003472:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80a1 	beq.w	80035c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347e:	4b34      	ldr	r3, [pc, #208]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b08      	cmp	r3, #8
 8003488:	d05c      	beq.n	8003544 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d141      	bne.n	8003516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003492:	4b31      	ldr	r3, [pc, #196]	@ (8003558 <HAL_RCC_OscConfig+0x478>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fd fcb0 	bl	8000dfc <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fd fcac 	bl	8000dfc <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e087      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b2:	4b27      	ldr	r3, [pc, #156]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	3b01      	subs	r3, #1
 80034d8:	041b      	lsls	r3, r3, #16
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	491b      	ldr	r1, [pc, #108]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003558 <HAL_RCC_OscConfig+0x478>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fd fc85 	bl	8000dfc <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f6:	f7fd fc81 	bl	8000dfc <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e05c      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x416>
 8003514:	e054      	b.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003516:	4b10      	ldr	r3, [pc, #64]	@ (8003558 <HAL_RCC_OscConfig+0x478>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fd fc6e 	bl	8000dfc <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003524:	f7fd fc6a 	bl	8000dfc <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e045      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x444>
 8003542:	e03d      	b.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d107      	bne.n	800355c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e038      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
 8003550:	40023800 	.word	0x40023800
 8003554:	40007000 	.word	0x40007000
 8003558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800355c:	4b1b      	ldr	r3, [pc, #108]	@ (80035cc <HAL_RCC_OscConfig+0x4ec>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d028      	beq.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d121      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d11a      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003594:	4293      	cmp	r3, r2
 8003596:	d111      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	3b01      	subs	r3, #1
 80035a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800

080035d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0cc      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b68      	ldr	r3, [pc, #416]	@ (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d90c      	bls.n	800360c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b65      	ldr	r3, [pc, #404]	@ (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b63      	ldr	r3, [pc, #396]	@ (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0b8      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003624:	4b59      	ldr	r3, [pc, #356]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a58      	ldr	r2, [pc, #352]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800362e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800363c:	4b53      	ldr	r3, [pc, #332]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a52      	ldr	r2, [pc, #328]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b50      	ldr	r3, [pc, #320]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	494d      	ldr	r1, [pc, #308]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d044      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b47      	ldr	r3, [pc, #284]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d119      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e07f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d003      	beq.n	800368e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368a:	2b03      	cmp	r3, #3
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	4b3f      	ldr	r3, [pc, #252]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369e:	4b3b      	ldr	r3, [pc, #236]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e067      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b37      	ldr	r3, [pc, #220]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4934      	ldr	r1, [pc, #208]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c0:	f7fd fb9c 	bl	8000dfc <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fd fb98 	bl	8000dfc <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e04f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b2b      	ldr	r3, [pc, #172]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b25      	ldr	r3, [pc, #148]	@ (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d20c      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b22      	ldr	r3, [pc, #136]	@ (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b20      	ldr	r3, [pc, #128]	@ (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e032      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b19      	ldr	r3, [pc, #100]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4916      	ldr	r1, [pc, #88]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003742:	4b12      	ldr	r3, [pc, #72]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	490e      	ldr	r1, [pc, #56]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003756:	f000 f821 	bl	800379c <HAL_RCC_GetSysClockFreq>
 800375a:	4602      	mov	r2, r0
 800375c:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	490a      	ldr	r1, [pc, #40]	@ (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	5ccb      	ldrb	r3, [r1, r3]
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	4a09      	ldr	r2, [pc, #36]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003772:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <HAL_RCC_ClockConfig+0x1c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fafc 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023c00 	.word	0x40023c00
 800378c:	40023800 	.word	0x40023800
 8003790:	080074c4 	.word	0x080074c4
 8003794:	20000000 	.word	0x20000000
 8003798:	20000004 	.word	0x20000004

0800379c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800379c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a0:	b090      	sub	sp, #64	@ 0x40
 80037a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b4:	4b59      	ldr	r3, [pc, #356]	@ (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d00d      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x40>
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	f200 80a1 	bhi.w	8003908 <HAL_RCC_GetSysClockFreq+0x16c>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ce:	e09b      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037d0:	4b53      	ldr	r3, [pc, #332]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x184>)
 80037d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037d4:	e09b      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d6:	4b53      	ldr	r3, [pc, #332]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037da:	e098      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037dc:	4b4f      	ldr	r3, [pc, #316]	@ (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e6:	4b4d      	ldr	r3, [pc, #308]	@ (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d028      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f2:	4b4a      	ldr	r3, [pc, #296]	@ (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	2200      	movs	r2, #0
 80037fa:	623b      	str	r3, [r7, #32]
 80037fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003804:	2100      	movs	r1, #0
 8003806:	4b47      	ldr	r3, [pc, #284]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x188>)
 8003808:	fb03 f201 	mul.w	r2, r3, r1
 800380c:	2300      	movs	r3, #0
 800380e:	fb00 f303 	mul.w	r3, r0, r3
 8003812:	4413      	add	r3, r2
 8003814:	4a43      	ldr	r2, [pc, #268]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x188>)
 8003816:	fba0 1202 	umull	r1, r2, r0, r2
 800381a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800381c:	460a      	mov	r2, r1
 800381e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003822:	4413      	add	r3, r2
 8003824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003828:	2200      	movs	r2, #0
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	61fa      	str	r2, [r7, #28]
 800382e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003832:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003836:	f7fc fccb 	bl	80001d0 <__aeabi_uldivmod>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4613      	mov	r3, r2
 8003840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003842:	e053      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003844:	4b35      	ldr	r3, [pc, #212]	@ (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	2200      	movs	r2, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	617a      	str	r2, [r7, #20]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003856:	f04f 0b00 	mov.w	fp, #0
 800385a:	4652      	mov	r2, sl
 800385c:	465b      	mov	r3, fp
 800385e:	f04f 0000 	mov.w	r0, #0
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	0159      	lsls	r1, r3, #5
 8003868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800386c:	0150      	lsls	r0, r2, #5
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	ebb2 080a 	subs.w	r8, r2, sl
 8003876:	eb63 090b 	sbc.w	r9, r3, fp
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003886:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800388a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800388e:	ebb2 0408 	subs.w	r4, r2, r8
 8003892:	eb63 0509 	sbc.w	r5, r3, r9
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	00eb      	lsls	r3, r5, #3
 80038a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a4:	00e2      	lsls	r2, r4, #3
 80038a6:	4614      	mov	r4, r2
 80038a8:	461d      	mov	r5, r3
 80038aa:	eb14 030a 	adds.w	r3, r4, sl
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	eb45 030b 	adc.w	r3, r5, fp
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c2:	4629      	mov	r1, r5
 80038c4:	028b      	lsls	r3, r1, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038cc:	4621      	mov	r1, r4
 80038ce:	028a      	lsls	r2, r1, #10
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d6:	2200      	movs	r2, #0
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	60fa      	str	r2, [r7, #12]
 80038dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038e0:	f7fc fc76 	bl	80001d0 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038ec:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <HAL_RCC_GetSysClockFreq+0x180>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80038fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x184>)
 800390a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003910:	4618      	mov	r0, r3
 8003912:	3740      	adds	r7, #64	@ 0x40
 8003914:	46bd      	mov	sp, r7
 8003916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	00f42400 	.word	0x00f42400
 8003924:	017d7840 	.word	0x017d7840

08003928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	@ (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	@ (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	080074d4 	.word	0x080074d4

08003968 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800398c:	2b00      	cmp	r3, #0
 800398e:	d035      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003990:	4b62      	ldr	r3, [pc, #392]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003996:	f7fd fa31 	bl	8000dfc <HAL_GetTick>
 800399a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800399e:	f7fd fa2d 	bl	8000dfc <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e0b0      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039b0:	4b5b      	ldr	r3, [pc, #364]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f0      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	019a      	lsls	r2, r3, #6
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	071b      	lsls	r3, r3, #28
 80039c8:	4955      	ldr	r1, [pc, #340]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039d0:	4b52      	ldr	r3, [pc, #328]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039d6:	f7fd fa11 	bl	8000dfc <HAL_GetTick>
 80039da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039de:	f7fd fa0d 	bl	8000dfc <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e090      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8083 	beq.w	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	4b44      	ldr	r3, [pc, #272]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	4a43      	ldr	r2, [pc, #268]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a1a:	4b41      	ldr	r3, [pc, #260]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a26:	4b3f      	ldr	r3, [pc, #252]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a32:	f7fd f9e3 	bl	8000dfc <HAL_GetTick>
 8003a36:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3a:	f7fd f9df 	bl	8000dfc <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e062      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003a4c:	4b35      	ldr	r3, [pc, #212]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a58:	4b31      	ldr	r3, [pc, #196]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a60:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02f      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d028      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a76:	4b2a      	ldr	r3, [pc, #168]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a80:	4b29      	ldr	r3, [pc, #164]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a86:	4b28      	ldr	r3, [pc, #160]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a8c:	4a24      	ldr	r2, [pc, #144]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a92:	4b23      	ldr	r3, [pc, #140]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d114      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fd f9ad 	bl	8000dfc <HAL_GetTick>
 8003aa2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	e00a      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fd f9a9 	bl	8000dfc <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e02a      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abc:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ee      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ad0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ad4:	d10d      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ad6:	4b12      	ldr	r3, [pc, #72]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aea:	490d      	ldr	r1, [pc, #52]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]
 8003af0:	e005      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003af2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003af8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003afc:	6093      	str	r3, [r2, #8]
 8003afe:	4b08      	ldr	r3, [pc, #32]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0a:	4905      	ldr	r1, [pc, #20]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	42470068 	.word	0x42470068
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40007000 	.word	0x40007000
 8003b28:	42470e40 	.word	0x42470e40

08003b2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d13f      	bne.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003b4a:	4b24      	ldr	r3, [pc, #144]	@ (8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b60:	d12f      	bne.n	8003bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b62:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003b64:	617b      	str	r3, [r7, #20]
          break;
 8003b66:	e02f      	b.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b68:	4b1c      	ldr	r3, [pc, #112]	@ (8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b74:	d108      	bne.n	8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b76:	4b19      	ldr	r3, [pc, #100]	@ (8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b7e:	4a19      	ldr	r2, [pc, #100]	@ (8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	e007      	b.n	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b88:	4b14      	ldr	r3, [pc, #80]	@ (8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b90:	4a15      	ldr	r2, [pc, #84]	@ (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b98:	4b10      	ldr	r3, [pc, #64]	@ (8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003bac:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bb2:	0f1b      	lsrs	r3, r3, #28
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	617b      	str	r3, [r7, #20]
          break;
 8003bc0:	e002      	b.n	8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
          break;
 8003bc6:	bf00      	nop
        }
      }
      break;
 8003bc8:	e000      	b.n	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003bca:	bf00      	nop
    }
  }
  return frequency;
 8003bcc:	697b      	ldr	r3, [r7, #20]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	00bb8000 	.word	0x00bb8000
 8003be4:	017d7840 	.word	0x017d7840
 8003be8:	00f42400 	.word	0x00f42400

08003bec <__NVIC_SetPriority>:
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	6039      	str	r1, [r7, #0]
 8003bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	db0a      	blt.n	8003c16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	490c      	ldr	r1, [pc, #48]	@ (8003c38 <__NVIC_SetPriority+0x4c>)
 8003c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0a:	0112      	lsls	r2, r2, #4
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	440b      	add	r3, r1
 8003c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c14:	e00a      	b.n	8003c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	4908      	ldr	r1, [pc, #32]	@ (8003c3c <__NVIC_SetPriority+0x50>)
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	3b04      	subs	r3, #4
 8003c24:	0112      	lsls	r2, r2, #4
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	440b      	add	r3, r1
 8003c2a:	761a      	strb	r2, [r3, #24]
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	e000e100 	.word	0xe000e100
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c44:	2100      	movs	r1, #0
 8003c46:	f06f 0004 	mvn.w	r0, #4
 8003c4a:	f7ff ffcf 	bl	8003bec <__NVIC_SetPriority>
#endif
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c5a:	f3ef 8305 	mrs	r3, IPSR
 8003c5e:	603b      	str	r3, [r7, #0]
  return(result);
 8003c60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003c66:	f06f 0305 	mvn.w	r3, #5
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	e00c      	b.n	8003c88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c98 <osKernelInitialize+0x44>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d105      	bne.n	8003c82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c76:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <osKernelInitialize+0x44>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	607b      	str	r3, [r7, #4]
 8003c80:	e002      	b.n	8003c88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295
 8003c86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c88:	687b      	ldr	r3, [r7, #4]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	200001e0 	.word	0x200001e0

08003c9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ca2:	f3ef 8305 	mrs	r3, IPSR
 8003ca6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003cae:	f06f 0305 	mvn.w	r3, #5
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	e010      	b.n	8003cd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <osKernelStart+0x48>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d109      	bne.n	8003cd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003cbe:	f7ff ffbf 	bl	8003c40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003cc2:	4b08      	ldr	r3, [pc, #32]	@ (8003ce4 <osKernelStart+0x48>)
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003cc8:	f001 f864 	bl	8004d94 <vTaskStartScheduler>
      stat = osOK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	e002      	b.n	8003cd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cd8:	687b      	ldr	r3, [r7, #4]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200001e0 	.word	0x200001e0

08003ce8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08e      	sub	sp, #56	@ 0x38
 8003cec:	af04      	add	r7, sp, #16
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cf8:	f3ef 8305 	mrs	r3, IPSR
 8003cfc:	617b      	str	r3, [r7, #20]
  return(result);
 8003cfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d17e      	bne.n	8003e02 <osThreadNew+0x11a>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d07b      	beq.n	8003e02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003d0e:	2318      	movs	r3, #24
 8003d10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003d16:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d045      	beq.n	8003dae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <osThreadNew+0x48>
        name = attr->name;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <osThreadNew+0x6e>
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b38      	cmp	r3, #56	@ 0x38
 8003d48:	d805      	bhi.n	8003d56 <osThreadNew+0x6e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <osThreadNew+0x72>
        return (NULL);
 8003d56:	2300      	movs	r3, #0
 8003d58:	e054      	b.n	8003e04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	089b      	lsrs	r3, r3, #2
 8003d68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00e      	beq.n	8003d90 <osThreadNew+0xa8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b5b      	cmp	r3, #91	@ 0x5b
 8003d78:	d90a      	bls.n	8003d90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d006      	beq.n	8003d90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <osThreadNew+0xa8>
        mem = 1;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	e010      	b.n	8003db2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10c      	bne.n	8003db2 <osThreadNew+0xca>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d108      	bne.n	8003db2 <osThreadNew+0xca>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d104      	bne.n	8003db2 <osThreadNew+0xca>
          mem = 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	e001      	b.n	8003db2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d110      	bne.n	8003dda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dc0:	9202      	str	r2, [sp, #8]
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fe3a 	bl	8004a48 <xTaskCreateStatic>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	e013      	b.n	8003e02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d110      	bne.n	8003e02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	f107 0310 	add.w	r3, r7, #16
 8003de8:	9301      	str	r3, [sp, #4]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 fe88 	bl	8004b08 <xTaskCreate>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d001      	beq.n	8003e02 <osThreadNew+0x11a>
            hTask = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e02:	693b      	ldr	r3, [r7, #16]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3728      	adds	r7, #40	@ 0x28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a07      	ldr	r2, [pc, #28]	@ (8003e38 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4a06      	ldr	r2, [pc, #24]	@ (8003e3c <vApplicationGetIdleTaskMemory+0x30>)
 8003e22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2280      	movs	r2, #128	@ 0x80
 8003e28:	601a      	str	r2, [r3, #0]
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	200001e4 	.word	0x200001e4
 8003e3c:	20000240 	.word	0x20000240

08003e40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a07      	ldr	r2, [pc, #28]	@ (8003e6c <vApplicationGetTimerTaskMemory+0x2c>)
 8003e50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4a06      	ldr	r2, [pc, #24]	@ (8003e70 <vApplicationGetTimerTaskMemory+0x30>)
 8003e56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e5e:	601a      	str	r2, [r3, #0]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	20000440 	.word	0x20000440
 8003e70:	2000049c 	.word	0x2000049c

08003e74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f103 0208 	add.w	r2, r3, #8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f103 0208 	add.w	r2, r3, #8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f103 0208 	add.w	r2, r3, #8
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	601a      	str	r2, [r3, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2c:	d103      	bne.n	8003f36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e00c      	b.n	8003f50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3308      	adds	r3, #8
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e002      	b.n	8003f44 <vListInsert+0x2e>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d2f6      	bcs.n	8003f3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6892      	ldr	r2, [r2, #8]
 8003f9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6852      	ldr	r2, [r2, #4]
 8003fa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d103      	bne.n	8003fbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	1e5a      	subs	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10b      	bne.n	8004008 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004002:	bf00      	nop
 8004004:	bf00      	nop
 8004006:	e7fd      	b.n	8004004 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004008:	f002 f87e 	bl	8006108 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004014:	68f9      	ldr	r1, [r7, #12]
 8004016:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	441a      	add	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004038:	3b01      	subs	r3, #1
 800403a:	68f9      	ldr	r1, [r7, #12]
 800403c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	441a      	add	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	22ff      	movs	r2, #255	@ 0xff
 800404c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	22ff      	movs	r2, #255	@ 0xff
 8004054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d114      	bne.n	8004088 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01a      	beq.n	800409c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3310      	adds	r3, #16
 800406a:	4618      	mov	r0, r3
 800406c:	f001 f920 	bl	80052b0 <xTaskRemoveFromEventList>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d012      	beq.n	800409c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004076:	4b0d      	ldr	r3, [pc, #52]	@ (80040ac <xQueueGenericReset+0xd0>)
 8004078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	e009      	b.n	800409c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3310      	adds	r3, #16
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fef1 	bl	8003e74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3324      	adds	r3, #36	@ 0x24
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff feec 	bl	8003e74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800409c:	f002 f866 	bl	800616c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040a0:	2301      	movs	r3, #1
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08e      	sub	sp, #56	@ 0x38
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040d6:	bf00      	nop
 80040d8:	bf00      	nop
 80040da:	e7fd      	b.n	80040d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10b      	bne.n	80040fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	e7fd      	b.n	80040f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <xQueueGenericCreateStatic+0x56>
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <xQueueGenericCreateStatic+0x5a>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <xQueueGenericCreateStatic+0x5c>
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10b      	bne.n	8004128 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	623b      	str	r3, [r7, #32]
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <xQueueGenericCreateStatic+0x84>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <xQueueGenericCreateStatic+0x88>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <xQueueGenericCreateStatic+0x8a>
 8004138:	2300      	movs	r3, #0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	61fb      	str	r3, [r7, #28]
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	e7fd      	b.n	8004152 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004156:	2350      	movs	r3, #80	@ 0x50
 8004158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b50      	cmp	r3, #80	@ 0x50
 800415e:	d00b      	beq.n	8004178 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	61bb      	str	r3, [r7, #24]
}
 8004172:	bf00      	nop
 8004174:	bf00      	nop
 8004176:	e7fd      	b.n	8004174 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004178:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800417e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800418c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f840 	bl	8004220 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3730      	adds	r7, #48	@ 0x30
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b08a      	sub	sp, #40	@ 0x28
 80041ae:	af02      	add	r7, sp, #8
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10b      	bne.n	80041d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	613b      	str	r3, [r7, #16]
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	e7fd      	b.n	80041d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	3350      	adds	r3, #80	@ 0x50
 80041e4:	4618      	mov	r0, r3
 80041e6:	f002 f8b1 	bl	800634c <pvPortMalloc>
 80041ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d011      	beq.n	8004216 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	3350      	adds	r3, #80	@ 0x50
 80041fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004204:	79fa      	ldrb	r2, [r7, #7]
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	4613      	mov	r3, r2
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f805 	bl	8004220 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004216:	69bb      	ldr	r3, [r7, #24]
	}
 8004218:	4618      	mov	r0, r3
 800421a:	3720      	adds	r7, #32
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d103      	bne.n	800423c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e002      	b.n	8004242 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800424e:	2101      	movs	r1, #1
 8004250:	69b8      	ldr	r0, [r7, #24]
 8004252:	f7ff fec3 	bl	8003fdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08e      	sub	sp, #56	@ 0x38
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004276:	2300      	movs	r3, #0
 8004278:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <xQueueGenericSend+0x34>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	e7fd      	b.n	8004298 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <xQueueGenericSend+0x42>
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <xQueueGenericSend+0x46>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <xQueueGenericSend+0x48>
 80042ae:	2300      	movs	r3, #0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10b      	bne.n	80042cc <xQueueGenericSend+0x64>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	e7fd      	b.n	80042c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d103      	bne.n	80042da <xQueueGenericSend+0x72>
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <xQueueGenericSend+0x76>
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <xQueueGenericSend+0x78>
 80042de:	2300      	movs	r3, #0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <xQueueGenericSend+0x94>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	623b      	str	r3, [r7, #32]
}
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042fc:	f001 f998 	bl	8005630 <xTaskGetSchedulerState>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <xQueueGenericSend+0xa4>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <xQueueGenericSend+0xa8>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <xQueueGenericSend+0xaa>
 8004310:	2300      	movs	r3, #0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <xQueueGenericSend+0xc6>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	61fb      	str	r3, [r7, #28]
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	e7fd      	b.n	800432a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800432e:	f001 feeb 	bl	8006108 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433a:	429a      	cmp	r2, r3
 800433c:	d302      	bcc.n	8004344 <xQueueGenericSend+0xdc>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d129      	bne.n	8004398 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800434a:	f000 fa0f 	bl	800476c <prvCopyDataToQueue>
 800434e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d010      	beq.n	800437a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435a:	3324      	adds	r3, #36	@ 0x24
 800435c:	4618      	mov	r0, r3
 800435e:	f000 ffa7 	bl	80052b0 <xTaskRemoveFromEventList>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004368:	4b3f      	ldr	r3, [pc, #252]	@ (8004468 <xQueueGenericSend+0x200>)
 800436a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	e00a      	b.n	8004390 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800437a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d007      	beq.n	8004390 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004380:	4b39      	ldr	r3, [pc, #228]	@ (8004468 <xQueueGenericSend+0x200>)
 8004382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004390:	f001 feec 	bl	800616c <vPortExitCritical>
				return pdPASS;
 8004394:	2301      	movs	r3, #1
 8004396:	e063      	b.n	8004460 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d103      	bne.n	80043a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800439e:	f001 fee5 	bl	800616c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e05c      	b.n	8004460 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043ac:	f107 0314 	add.w	r3, r7, #20
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 ffe1 	bl	8005378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043b6:	2301      	movs	r3, #1
 80043b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043ba:	f001 fed7 	bl	800616c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043be:	f000 fd51 	bl	8004e64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043c2:	f001 fea1 	bl	8006108 <vPortEnterCritical>
 80043c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043cc:	b25b      	sxtb	r3, r3
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d103      	bne.n	80043dc <xQueueGenericSend+0x174>
 80043d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043e2:	b25b      	sxtb	r3, r3
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d103      	bne.n	80043f2 <xQueueGenericSend+0x18a>
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043f2:	f001 febb 	bl	800616c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043f6:	1d3a      	adds	r2, r7, #4
 80043f8:	f107 0314 	add.w	r3, r7, #20
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 ffd0 	bl	80053a4 <xTaskCheckForTimeOut>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d124      	bne.n	8004454 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800440a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800440c:	f000 faa6 	bl	800495c <prvIsQueueFull>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d018      	beq.n	8004448 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	3310      	adds	r3, #16
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fef4 	bl	800520c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004426:	f000 fa31 	bl	800488c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800442a:	f000 fd29 	bl	8004e80 <xTaskResumeAll>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	f47f af7c 	bne.w	800432e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004436:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <xQueueGenericSend+0x200>)
 8004438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	e772      	b.n	800432e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800444a:	f000 fa1f 	bl	800488c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800444e:	f000 fd17 	bl	8004e80 <xTaskResumeAll>
 8004452:	e76c      	b.n	800432e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004456:	f000 fa19 	bl	800488c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800445a:	f000 fd11 	bl	8004e80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800445e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004460:	4618      	mov	r0, r3
 8004462:	3738      	adds	r7, #56	@ 0x38
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	e000ed04 	.word	0xe000ed04

0800446c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b090      	sub	sp, #64	@ 0x40
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800447e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	e7fd      	b.n	8004498 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <xQueueGenericSendFromISR+0x3e>
 80044a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <xQueueGenericSendFromISR+0x42>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <xQueueGenericSendFromISR+0x44>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	e7fd      	b.n	80044c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d103      	bne.n	80044da <xQueueGenericSendFromISR+0x6e>
 80044d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <xQueueGenericSendFromISR+0x72>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <xQueueGenericSendFromISR+0x74>
 80044de:	2300      	movs	r3, #0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	623b      	str	r3, [r7, #32]
}
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	e7fd      	b.n	80044f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044fc:	f001 fee4 	bl	80062c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004500:	f3ef 8211 	mrs	r2, BASEPRI
 8004504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	61fa      	str	r2, [r7, #28]
 8004516:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004518:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800451a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800451c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004524:	429a      	cmp	r2, r3
 8004526:	d302      	bcc.n	800452e <xQueueGenericSendFromISR+0xc2>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d12f      	bne.n	800458e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800452e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004530:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004534:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004544:	f000 f912 	bl	800476c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004548:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d112      	bne.n	8004578 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	2b00      	cmp	r3, #0
 8004558:	d016      	beq.n	8004588 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800455a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455c:	3324      	adds	r3, #36	@ 0x24
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fea6 	bl	80052b0 <xTaskRemoveFromEventList>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00e      	beq.n	8004588 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00b      	beq.n	8004588 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e007      	b.n	8004588 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004578:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800457c:	3301      	adds	r3, #1
 800457e:	b2db      	uxtb	r3, r3
 8004580:	b25a      	sxtb	r2, r3
 8004582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004588:	2301      	movs	r3, #1
 800458a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800458c:	e001      	b.n	8004592 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800458e:	2300      	movs	r3, #0
 8004590:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004594:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800459c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800459e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3740      	adds	r7, #64	@ 0x40
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08c      	sub	sp, #48	@ 0x30
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045b4:	2300      	movs	r3, #0
 80045b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10b      	bne.n	80045da <xQueueReceive+0x32>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	623b      	str	r3, [r7, #32]
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop
 80045d8:	e7fd      	b.n	80045d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d103      	bne.n	80045e8 <xQueueReceive+0x40>
 80045e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <xQueueReceive+0x44>
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <xQueueReceive+0x46>
 80045ec:	2300      	movs	r3, #0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <xQueueReceive+0x62>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	61fb      	str	r3, [r7, #28]
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	e7fd      	b.n	8004606 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800460a:	f001 f811 	bl	8005630 <xTaskGetSchedulerState>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d102      	bne.n	800461a <xQueueReceive+0x72>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <xQueueReceive+0x76>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <xQueueReceive+0x78>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <xQueueReceive+0x94>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	61bb      	str	r3, [r7, #24]
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800463c:	f001 fd64 	bl	8006108 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01f      	beq.n	800468c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004650:	f000 f8f6 	bl	8004840 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	1e5a      	subs	r2, r3, #1
 8004658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800465c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00f      	beq.n	8004684 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004666:	3310      	adds	r3, #16
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fe21 	bl	80052b0 <xTaskRemoveFromEventList>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004674:	4b3c      	ldr	r3, [pc, #240]	@ (8004768 <xQueueReceive+0x1c0>)
 8004676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004684:	f001 fd72 	bl	800616c <vPortExitCritical>
				return pdPASS;
 8004688:	2301      	movs	r3, #1
 800468a:	e069      	b.n	8004760 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004692:	f001 fd6b 	bl	800616c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004696:	2300      	movs	r3, #0
 8004698:	e062      	b.n	8004760 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800469a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046a0:	f107 0310 	add.w	r3, r7, #16
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fe67 	bl	8005378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046aa:	2301      	movs	r3, #1
 80046ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046ae:	f001 fd5d 	bl	800616c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046b2:	f000 fbd7 	bl	8004e64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046b6:	f001 fd27 	bl	8006108 <vPortEnterCritical>
 80046ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046c0:	b25b      	sxtb	r3, r3
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d103      	bne.n	80046d0 <xQueueReceive+0x128>
 80046c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046d6:	b25b      	sxtb	r3, r3
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d103      	bne.n	80046e6 <xQueueReceive+0x13e>
 80046de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046e6:	f001 fd41 	bl	800616c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046ea:	1d3a      	adds	r2, r7, #4
 80046ec:	f107 0310 	add.w	r3, r7, #16
 80046f0:	4611      	mov	r1, r2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fe56 	bl	80053a4 <xTaskCheckForTimeOut>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d123      	bne.n	8004746 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004700:	f000 f916 	bl	8004930 <prvIsQueueEmpty>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d017      	beq.n	800473a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800470a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470c:	3324      	adds	r3, #36	@ 0x24
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fd7a 	bl	800520c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800471a:	f000 f8b7 	bl	800488c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800471e:	f000 fbaf 	bl	8004e80 <xTaskResumeAll>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d189      	bne.n	800463c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004728:	4b0f      	ldr	r3, [pc, #60]	@ (8004768 <xQueueReceive+0x1c0>)
 800472a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	e780      	b.n	800463c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800473a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800473c:	f000 f8a6 	bl	800488c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004740:	f000 fb9e 	bl	8004e80 <xTaskResumeAll>
 8004744:	e77a      	b.n	800463c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004748:	f000 f8a0 	bl	800488c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800474c:	f000 fb98 	bl	8004e80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004752:	f000 f8ed 	bl	8004930 <prvIsQueueEmpty>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	f43f af6f 	beq.w	800463c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800475e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004760:	4618      	mov	r0, r3
 8004762:	3730      	adds	r7, #48	@ 0x30
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004780:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10d      	bne.n	80047a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d14d      	bne.n	800482e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 ff68 	bl	800566c <xTaskPriorityDisinherit>
 800479c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	e043      	b.n	800482e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d119      	bne.n	80047e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6858      	ldr	r0, [r3, #4]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b4:	461a      	mov	r2, r3
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	f002 fe12 	bl	80073e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	441a      	add	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d32b      	bcc.n	800482e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	e026      	b.n	800482e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68d8      	ldr	r0, [r3, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e8:	461a      	mov	r2, r3
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	f002 fdf8 	bl	80073e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	425b      	negs	r3, r3
 80047fa:	441a      	add	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d207      	bcs.n	800481c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	425b      	negs	r3, r3
 8004816:	441a      	add	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d105      	bne.n	800482e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	3b01      	subs	r3, #1
 800482c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004836:	697b      	ldr	r3, [r7, #20]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d018      	beq.n	8004884 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	441a      	add	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	429a      	cmp	r2, r3
 800486a:	d303      	bcc.n	8004874 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68d9      	ldr	r1, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	461a      	mov	r2, r3
 800487e:	6838      	ldr	r0, [r7, #0]
 8004880:	f002 fdae 	bl	80073e0 <memcpy>
	}
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004894:	f001 fc38 	bl	8006108 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800489e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048a0:	e011      	b.n	80048c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d012      	beq.n	80048d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3324      	adds	r3, #36	@ 0x24
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fcfe 	bl	80052b0 <xTaskRemoveFromEventList>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80048ba:	f000 fdd7 	bl	800546c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	dce9      	bgt.n	80048a2 <prvUnlockQueue+0x16>
 80048ce:	e000      	b.n	80048d2 <prvUnlockQueue+0x46>
					break;
 80048d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	22ff      	movs	r2, #255	@ 0xff
 80048d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80048da:	f001 fc47 	bl	800616c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048de:	f001 fc13 	bl	8006108 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048ea:	e011      	b.n	8004910 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d012      	beq.n	800491a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3310      	adds	r3, #16
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fcd9 	bl	80052b0 <xTaskRemoveFromEventList>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004904:	f000 fdb2 	bl	800546c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004908:	7bbb      	ldrb	r3, [r7, #14]
 800490a:	3b01      	subs	r3, #1
 800490c:	b2db      	uxtb	r3, r3
 800490e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004914:	2b00      	cmp	r3, #0
 8004916:	dce9      	bgt.n	80048ec <prvUnlockQueue+0x60>
 8004918:	e000      	b.n	800491c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800491a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	22ff      	movs	r2, #255	@ 0xff
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004924:	f001 fc22 	bl	800616c <vPortExitCritical>
}
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004938:	f001 fbe6 	bl	8006108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004940:	2b00      	cmp	r3, #0
 8004942:	d102      	bne.n	800494a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004944:	2301      	movs	r3, #1
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e001      	b.n	800494e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800494e:	f001 fc0d 	bl	800616c <vPortExitCritical>

	return xReturn;
 8004952:	68fb      	ldr	r3, [r7, #12]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004964:	f001 fbd0 	bl	8006108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004970:	429a      	cmp	r2, r3
 8004972:	d102      	bne.n	800497a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004974:	2301      	movs	r3, #1
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	e001      	b.n	800497e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800497e:	f001 fbf5 	bl	800616c <vPortExitCritical>

	return xReturn;
 8004982:	68fb      	ldr	r3, [r7, #12]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e014      	b.n	80049c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800499c:	4a0f      	ldr	r2, [pc, #60]	@ (80049dc <vQueueAddToRegistry+0x50>)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10b      	bne.n	80049c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049a8:	490c      	ldr	r1, [pc, #48]	@ (80049dc <vQueueAddToRegistry+0x50>)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049b2:	4a0a      	ldr	r2, [pc, #40]	@ (80049dc <vQueueAddToRegistry+0x50>)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	4413      	add	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049be:	e006      	b.n	80049ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	3301      	adds	r3, #1
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b07      	cmp	r3, #7
 80049ca:	d9e7      	bls.n	800499c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	2000089c 	.word	0x2000089c

080049e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049f0:	f001 fb8a 	bl	8006108 <vPortEnterCritical>
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049fa:	b25b      	sxtb	r3, r3
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d103      	bne.n	8004a0a <vQueueWaitForMessageRestricted+0x2a>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a10:	b25b      	sxtb	r3, r3
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d103      	bne.n	8004a20 <vQueueWaitForMessageRestricted+0x40>
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a20:	f001 fba4 	bl	800616c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	3324      	adds	r3, #36	@ 0x24
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fc0f 	bl	8005258 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a3a:	6978      	ldr	r0, [r7, #20]
 8004a3c:	f7ff ff26 	bl	800488c <prvUnlockQueue>
	}
 8004a40:	bf00      	nop
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08e      	sub	sp, #56	@ 0x38
 8004a4c:	af04      	add	r7, sp, #16
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10b      	bne.n	8004a74 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	623b      	str	r3, [r7, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	61fb      	str	r3, [r7, #28]
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a92:	235c      	movs	r3, #92	@ 0x5c
 8004a94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b5c      	cmp	r3, #92	@ 0x5c
 8004a9a:	d00b      	beq.n	8004ab4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	61bb      	str	r3, [r7, #24]
}
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	e7fd      	b.n	8004ab0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ab4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01e      	beq.n	8004afa <xTaskCreateStatic+0xb2>
 8004abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01b      	beq.n	8004afa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9303      	str	r3, [sp, #12]
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	9302      	str	r3, [sp, #8]
 8004adc:	f107 0314 	add.w	r3, r7, #20
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f850 	bl	8004b92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004af2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004af4:	f000 f8de 	bl	8004cb4 <prvAddNewTaskToReadyList>
 8004af8:	e001      	b.n	8004afe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004afe:	697b      	ldr	r3, [r7, #20]
	}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3728      	adds	r7, #40	@ 0x28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08c      	sub	sp, #48	@ 0x30
 8004b0c:	af04      	add	r7, sp, #16
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	4613      	mov	r3, r2
 8004b16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b18:	88fb      	ldrh	r3, [r7, #6]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 fc15 	bl	800634c <pvPortMalloc>
 8004b22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00e      	beq.n	8004b48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b2a:	205c      	movs	r0, #92	@ 0x5c
 8004b2c:	f001 fc0e 	bl	800634c <pvPortMalloc>
 8004b30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b3e:	e005      	b.n	8004b4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b40:	6978      	ldr	r0, [r7, #20]
 8004b42:	f001 fcd1 	bl	80064e8 <vPortFree>
 8004b46:	e001      	b.n	8004b4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d017      	beq.n	8004b82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9303      	str	r3, [sp, #12]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	9302      	str	r3, [sp, #8]
 8004b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f80e 	bl	8004b92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b76:	69f8      	ldr	r0, [r7, #28]
 8004b78:	f000 f89c 	bl	8004cb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	e002      	b.n	8004b88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b82:	f04f 33ff 	mov.w	r3, #4294967295
 8004b86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b88:	69bb      	ldr	r3, [r7, #24]
	}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b088      	sub	sp, #32
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	461a      	mov	r2, r3
 8004baa:	21a5      	movs	r1, #165	@ 0xa5
 8004bac:	f002 fbec 	bl	8007388 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	f023 0307 	bic.w	r3, r3, #7
 8004bc8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00b      	beq.n	8004bec <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	617b      	str	r3, [r7, #20]
}
 8004be6:	bf00      	nop
 8004be8:	bf00      	nop
 8004bea:	e7fd      	b.n	8004be8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01f      	beq.n	8004c32 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e012      	b.n	8004c1e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	7819      	ldrb	r1, [r3, #0]
 8004c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	3334      	adds	r3, #52	@ 0x34
 8004c08:	460a      	mov	r2, r1
 8004c0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d006      	beq.n	8004c26 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	2b0f      	cmp	r3, #15
 8004c22:	d9e9      	bls.n	8004bf8 <prvInitialiseNewTask+0x66>
 8004c24:	e000      	b.n	8004c28 <prvInitialiseNewTask+0x96>
			{
				break;
 8004c26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c30:	e003      	b.n	8004c3a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3c:	2b37      	cmp	r3, #55	@ 0x37
 8004c3e:	d901      	bls.n	8004c44 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c40:	2337      	movs	r3, #55	@ 0x37
 8004c42:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c48:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c4e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c52:	2200      	movs	r2, #0
 8004c54:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff f92a 	bl	8003eb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c62:	3318      	adds	r3, #24
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff f925 	bl	8003eb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c72:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c7e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c82:	2200      	movs	r2, #0
 8004c84:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	69b8      	ldr	r0, [r7, #24]
 8004c94:	f001 f908 	bl	8005ea8 <pxPortInitialiseStack>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004caa:	bf00      	nop
 8004cac:	3720      	adds	r7, #32
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cbc:	f001 fa24 	bl	8006108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8004d78 <prvAddNewTaskToReadyList+0xc4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004d78 <prvAddNewTaskToReadyList+0xc4>)
 8004cc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cca:	4b2c      	ldr	r3, [pc, #176]	@ (8004d7c <prvAddNewTaskToReadyList+0xc8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8004d7c <prvAddNewTaskToReadyList+0xc8>)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cd8:	4b27      	ldr	r3, [pc, #156]	@ (8004d78 <prvAddNewTaskToReadyList+0xc4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d110      	bne.n	8004d02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ce0:	f000 fbe8 	bl	80054b4 <prvInitialiseTaskLists>
 8004ce4:	e00d      	b.n	8004d02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ce6:	4b26      	ldr	r3, [pc, #152]	@ (8004d80 <prvAddNewTaskToReadyList+0xcc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cee:	4b23      	ldr	r3, [pc, #140]	@ (8004d7c <prvAddNewTaskToReadyList+0xc8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d802      	bhi.n	8004d02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d7c <prvAddNewTaskToReadyList+0xc8>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d02:	4b20      	ldr	r3, [pc, #128]	@ (8004d84 <prvAddNewTaskToReadyList+0xd0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3301      	adds	r3, #1
 8004d08:	4a1e      	ldr	r2, [pc, #120]	@ (8004d84 <prvAddNewTaskToReadyList+0xd0>)
 8004d0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d84 <prvAddNewTaskToReadyList+0xd0>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d18:	4b1b      	ldr	r3, [pc, #108]	@ (8004d88 <prvAddNewTaskToReadyList+0xd4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d903      	bls.n	8004d28 <prvAddNewTaskToReadyList+0x74>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	4a18      	ldr	r2, [pc, #96]	@ (8004d88 <prvAddNewTaskToReadyList+0xd4>)
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4a15      	ldr	r2, [pc, #84]	@ (8004d8c <prvAddNewTaskToReadyList+0xd8>)
 8004d36:	441a      	add	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f7ff f8c5 	bl	8003ece <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d44:	f001 fa12 	bl	800616c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d48:	4b0d      	ldr	r3, [pc, #52]	@ (8004d80 <prvAddNewTaskToReadyList+0xcc>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00e      	beq.n	8004d6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d50:	4b0a      	ldr	r3, [pc, #40]	@ (8004d7c <prvAddNewTaskToReadyList+0xc8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d207      	bcs.n	8004d6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d90 <prvAddNewTaskToReadyList+0xdc>)
 8004d60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000db0 	.word	0x20000db0
 8004d7c:	200008dc 	.word	0x200008dc
 8004d80:	20000dbc 	.word	0x20000dbc
 8004d84:	20000dcc 	.word	0x20000dcc
 8004d88:	20000db8 	.word	0x20000db8
 8004d8c:	200008e0 	.word	0x200008e0
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	@ 0x28
 8004d98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004da2:	463a      	mov	r2, r7
 8004da4:	1d39      	adds	r1, r7, #4
 8004da6:	f107 0308 	add.w	r3, r7, #8
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff f82e 	bl	8003e0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	9202      	str	r2, [sp, #8]
 8004db8:	9301      	str	r3, [sp, #4]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	460a      	mov	r2, r1
 8004dc2:	4922      	ldr	r1, [pc, #136]	@ (8004e4c <vTaskStartScheduler+0xb8>)
 8004dc4:	4822      	ldr	r0, [pc, #136]	@ (8004e50 <vTaskStartScheduler+0xbc>)
 8004dc6:	f7ff fe3f 	bl	8004a48 <xTaskCreateStatic>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4a21      	ldr	r2, [pc, #132]	@ (8004e54 <vTaskStartScheduler+0xc0>)
 8004dce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004dd0:	4b20      	ldr	r3, [pc, #128]	@ (8004e54 <vTaskStartScheduler+0xc0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	e001      	b.n	8004de2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d102      	bne.n	8004dee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004de8:	f000 fd04 	bl	80057f4 <xTimerCreateTimerTask>
 8004dec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d116      	bne.n	8004e22 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	613b      	str	r3, [r7, #16]
}
 8004e06:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e08:	4b13      	ldr	r3, [pc, #76]	@ (8004e58 <vTaskStartScheduler+0xc4>)
 8004e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e10:	4b12      	ldr	r3, [pc, #72]	@ (8004e5c <vTaskStartScheduler+0xc8>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e16:	4b12      	ldr	r3, [pc, #72]	@ (8004e60 <vTaskStartScheduler+0xcc>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e1c:	f001 f8d0 	bl	8005fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e20:	e00f      	b.n	8004e42 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d10b      	bne.n	8004e42 <vTaskStartScheduler+0xae>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	60fb      	str	r3, [r7, #12]
}
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
 8004e40:	e7fd      	b.n	8004e3e <vTaskStartScheduler+0xaa>
}
 8004e42:	bf00      	nop
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	08007440 	.word	0x08007440
 8004e50:	08005485 	.word	0x08005485
 8004e54:	20000dd4 	.word	0x20000dd4
 8004e58:	20000dd0 	.word	0x20000dd0
 8004e5c:	20000dbc 	.word	0x20000dbc
 8004e60:	20000db4 	.word	0x20000db4

08004e64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e68:	4b04      	ldr	r3, [pc, #16]	@ (8004e7c <vTaskSuspendAll+0x18>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	4a03      	ldr	r2, [pc, #12]	@ (8004e7c <vTaskSuspendAll+0x18>)
 8004e70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e72:	bf00      	nop
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	20000dd8 	.word	0x20000dd8

08004e80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e8e:	4b42      	ldr	r3, [pc, #264]	@ (8004f98 <xTaskResumeAll+0x118>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <xTaskResumeAll+0x2e>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	603b      	str	r3, [r7, #0]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004eae:	f001 f92b 	bl	8006108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004eb2:	4b39      	ldr	r3, [pc, #228]	@ (8004f98 <xTaskResumeAll+0x118>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	4a37      	ldr	r2, [pc, #220]	@ (8004f98 <xTaskResumeAll+0x118>)
 8004eba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ebc:	4b36      	ldr	r3, [pc, #216]	@ (8004f98 <xTaskResumeAll+0x118>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d162      	bne.n	8004f8a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ec4:	4b35      	ldr	r3, [pc, #212]	@ (8004f9c <xTaskResumeAll+0x11c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d05e      	beq.n	8004f8a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ecc:	e02f      	b.n	8004f2e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ece:	4b34      	ldr	r3, [pc, #208]	@ (8004fa0 <xTaskResumeAll+0x120>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3318      	adds	r3, #24
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff f854 	bl	8003f88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff f84f 	bl	8003f88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eee:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa4 <xTaskResumeAll+0x124>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d903      	bls.n	8004efe <xTaskResumeAll+0x7e>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	4a2a      	ldr	r2, [pc, #168]	@ (8004fa4 <xTaskResumeAll+0x124>)
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4a27      	ldr	r2, [pc, #156]	@ (8004fa8 <xTaskResumeAll+0x128>)
 8004f0c:	441a      	add	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f7fe ffda 	bl	8003ece <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1e:	4b23      	ldr	r3, [pc, #140]	@ (8004fac <xTaskResumeAll+0x12c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d302      	bcc.n	8004f2e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004f28:	4b21      	ldr	r3, [pc, #132]	@ (8004fb0 <xTaskResumeAll+0x130>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa0 <xTaskResumeAll+0x120>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1cb      	bne.n	8004ece <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f3c:	f000 fb58 	bl	80055f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f40:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb4 <xTaskResumeAll+0x134>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d010      	beq.n	8004f6e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f4c:	f000 f846 	bl	8004fdc <xTaskIncrementTick>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004f56:	4b16      	ldr	r3, [pc, #88]	@ (8004fb0 <xTaskResumeAll+0x130>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f1      	bne.n	8004f4c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004f68:	4b12      	ldr	r3, [pc, #72]	@ (8004fb4 <xTaskResumeAll+0x134>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f6e:	4b10      	ldr	r3, [pc, #64]	@ (8004fb0 <xTaskResumeAll+0x130>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f76:	2301      	movs	r3, #1
 8004f78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb8 <xTaskResumeAll+0x138>)
 8004f7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f8a:	f001 f8ef 	bl	800616c <vPortExitCritical>

	return xAlreadyYielded;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20000dd8 	.word	0x20000dd8
 8004f9c:	20000db0 	.word	0x20000db0
 8004fa0:	20000d70 	.word	0x20000d70
 8004fa4:	20000db8 	.word	0x20000db8
 8004fa8:	200008e0 	.word	0x200008e0
 8004fac:	200008dc 	.word	0x200008dc
 8004fb0:	20000dc4 	.word	0x20000dc4
 8004fb4:	20000dc0 	.word	0x20000dc0
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fc2:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <xTaskGetTickCount+0x1c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fc8:	687b      	ldr	r3, [r7, #4]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000db4 	.word	0x20000db4

08004fdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fe6:	4b4f      	ldr	r3, [pc, #316]	@ (8005124 <xTaskIncrementTick+0x148>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f040 8090 	bne.w	8005110 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8005128 <xTaskIncrementTick+0x14c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ff8:	4a4b      	ldr	r2, [pc, #300]	@ (8005128 <xTaskIncrementTick+0x14c>)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d121      	bne.n	8005048 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005004:	4b49      	ldr	r3, [pc, #292]	@ (800512c <xTaskIncrementTick+0x150>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <xTaskIncrementTick+0x4a>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	603b      	str	r3, [r7, #0]
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	e7fd      	b.n	8005022 <xTaskIncrementTick+0x46>
 8005026:	4b41      	ldr	r3, [pc, #260]	@ (800512c <xTaskIncrementTick+0x150>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	4b40      	ldr	r3, [pc, #256]	@ (8005130 <xTaskIncrementTick+0x154>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3e      	ldr	r2, [pc, #248]	@ (800512c <xTaskIncrementTick+0x150>)
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	4a3e      	ldr	r2, [pc, #248]	@ (8005130 <xTaskIncrementTick+0x154>)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	4b3e      	ldr	r3, [pc, #248]	@ (8005134 <xTaskIncrementTick+0x158>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3301      	adds	r3, #1
 8005040:	4a3c      	ldr	r2, [pc, #240]	@ (8005134 <xTaskIncrementTick+0x158>)
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	f000 fad4 	bl	80055f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005048:	4b3b      	ldr	r3, [pc, #236]	@ (8005138 <xTaskIncrementTick+0x15c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	429a      	cmp	r2, r3
 8005050:	d349      	bcc.n	80050e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005052:	4b36      	ldr	r3, [pc, #216]	@ (800512c <xTaskIncrementTick+0x150>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800505c:	4b36      	ldr	r3, [pc, #216]	@ (8005138 <xTaskIncrementTick+0x15c>)
 800505e:	f04f 32ff 	mov.w	r2, #4294967295
 8005062:	601a      	str	r2, [r3, #0]
					break;
 8005064:	e03f      	b.n	80050e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005066:	4b31      	ldr	r3, [pc, #196]	@ (800512c <xTaskIncrementTick+0x150>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	429a      	cmp	r2, r3
 800507c:	d203      	bcs.n	8005086 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800507e:	4a2e      	ldr	r2, [pc, #184]	@ (8005138 <xTaskIncrementTick+0x15c>)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005084:	e02f      	b.n	80050e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	3304      	adds	r3, #4
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe ff7c 	bl	8003f88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005094:	2b00      	cmp	r3, #0
 8005096:	d004      	beq.n	80050a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	3318      	adds	r3, #24
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe ff73 	bl	8003f88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a6:	4b25      	ldr	r3, [pc, #148]	@ (800513c <xTaskIncrementTick+0x160>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d903      	bls.n	80050b6 <xTaskIncrementTick+0xda>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	4a22      	ldr	r2, [pc, #136]	@ (800513c <xTaskIncrementTick+0x160>)
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005140 <xTaskIncrementTick+0x164>)
 80050c4:	441a      	add	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	3304      	adds	r3, #4
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7fe fefe 	bl	8003ece <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005144 <xTaskIncrementTick+0x168>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	429a      	cmp	r2, r3
 80050de:	d3b8      	bcc.n	8005052 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80050e0:	2301      	movs	r3, #1
 80050e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050e4:	e7b5      	b.n	8005052 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050e6:	4b17      	ldr	r3, [pc, #92]	@ (8005144 <xTaskIncrementTick+0x168>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ec:	4914      	ldr	r1, [pc, #80]	@ (8005140 <xTaskIncrementTick+0x164>)
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d901      	bls.n	8005102 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80050fe:	2301      	movs	r3, #1
 8005100:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005102:	4b11      	ldr	r3, [pc, #68]	@ (8005148 <xTaskIncrementTick+0x16c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800510a:	2301      	movs	r3, #1
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e004      	b.n	800511a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005110:	4b0e      	ldr	r3, [pc, #56]	@ (800514c <xTaskIncrementTick+0x170>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3301      	adds	r3, #1
 8005116:	4a0d      	ldr	r2, [pc, #52]	@ (800514c <xTaskIncrementTick+0x170>)
 8005118:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800511a:	697b      	ldr	r3, [r7, #20]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000dd8 	.word	0x20000dd8
 8005128:	20000db4 	.word	0x20000db4
 800512c:	20000d68 	.word	0x20000d68
 8005130:	20000d6c 	.word	0x20000d6c
 8005134:	20000dc8 	.word	0x20000dc8
 8005138:	20000dd0 	.word	0x20000dd0
 800513c:	20000db8 	.word	0x20000db8
 8005140:	200008e0 	.word	0x200008e0
 8005144:	200008dc 	.word	0x200008dc
 8005148:	20000dc4 	.word	0x20000dc4
 800514c:	20000dc0 	.word	0x20000dc0

08005150 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005156:	4b28      	ldr	r3, [pc, #160]	@ (80051f8 <vTaskSwitchContext+0xa8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800515e:	4b27      	ldr	r3, [pc, #156]	@ (80051fc <vTaskSwitchContext+0xac>)
 8005160:	2201      	movs	r2, #1
 8005162:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005164:	e042      	b.n	80051ec <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005166:	4b25      	ldr	r3, [pc, #148]	@ (80051fc <vTaskSwitchContext+0xac>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516c:	4b24      	ldr	r3, [pc, #144]	@ (8005200 <vTaskSwitchContext+0xb0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	e011      	b.n	8005198 <vTaskSwitchContext+0x48>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10b      	bne.n	8005192 <vTaskSwitchContext+0x42>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	607b      	str	r3, [r7, #4]
}
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	e7fd      	b.n	800518e <vTaskSwitchContext+0x3e>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3b01      	subs	r3, #1
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	491a      	ldr	r1, [pc, #104]	@ (8005204 <vTaskSwitchContext+0xb4>)
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0e3      	beq.n	8005174 <vTaskSwitchContext+0x24>
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4a13      	ldr	r2, [pc, #76]	@ (8005204 <vTaskSwitchContext+0xb4>)
 80051b8:	4413      	add	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	605a      	str	r2, [r3, #4]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	3308      	adds	r3, #8
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d104      	bne.n	80051dc <vTaskSwitchContext+0x8c>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	605a      	str	r2, [r3, #4]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	4a09      	ldr	r2, [pc, #36]	@ (8005208 <vTaskSwitchContext+0xb8>)
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	4a06      	ldr	r2, [pc, #24]	@ (8005200 <vTaskSwitchContext+0xb0>)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6013      	str	r3, [r2, #0]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	20000dd8 	.word	0x20000dd8
 80051fc:	20000dc4 	.word	0x20000dc4
 8005200:	20000db8 	.word	0x20000db8
 8005204:	200008e0 	.word	0x200008e0
 8005208:	200008dc 	.word	0x200008dc

0800520c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10b      	bne.n	8005234 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	60fb      	str	r3, [r7, #12]
}
 800522e:	bf00      	nop
 8005230:	bf00      	nop
 8005232:	e7fd      	b.n	8005230 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005234:	4b07      	ldr	r3, [pc, #28]	@ (8005254 <vTaskPlaceOnEventList+0x48>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3318      	adds	r3, #24
 800523a:	4619      	mov	r1, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7fe fe6a 	bl	8003f16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005242:	2101      	movs	r1, #1
 8005244:	6838      	ldr	r0, [r7, #0]
 8005246:	f000 fa81 	bl	800574c <prvAddCurrentTaskToDelayedList>
}
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	200008dc 	.word	0x200008dc

08005258 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	617b      	str	r3, [r7, #20]
}
 800527c:	bf00      	nop
 800527e:	bf00      	nop
 8005280:	e7fd      	b.n	800527e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005282:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <vTaskPlaceOnEventListRestricted+0x54>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3318      	adds	r3, #24
 8005288:	4619      	mov	r1, r3
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f7fe fe1f 	bl	8003ece <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005296:	f04f 33ff 	mov.w	r3, #4294967295
 800529a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	68b8      	ldr	r0, [r7, #8]
 80052a0:	f000 fa54 	bl	800574c <prvAddCurrentTaskToDelayedList>
	}
 80052a4:	bf00      	nop
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	200008dc 	.word	0x200008dc

080052b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60fb      	str	r3, [r7, #12]
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	e7fd      	b.n	80052da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	3318      	adds	r3, #24
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fe fe50 	bl	8003f88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005360 <xTaskRemoveFromEventList+0xb0>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d11d      	bne.n	800532c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fe fe47 	bl	8003f88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052fe:	4b19      	ldr	r3, [pc, #100]	@ (8005364 <xTaskRemoveFromEventList+0xb4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d903      	bls.n	800530e <xTaskRemoveFromEventList+0x5e>
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530a:	4a16      	ldr	r2, [pc, #88]	@ (8005364 <xTaskRemoveFromEventList+0xb4>)
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4a13      	ldr	r2, [pc, #76]	@ (8005368 <xTaskRemoveFromEventList+0xb8>)
 800531c:	441a      	add	r2, r3
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	3304      	adds	r3, #4
 8005322:	4619      	mov	r1, r3
 8005324:	4610      	mov	r0, r2
 8005326:	f7fe fdd2 	bl	8003ece <vListInsertEnd>
 800532a:	e005      	b.n	8005338 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	3318      	adds	r3, #24
 8005330:	4619      	mov	r1, r3
 8005332:	480e      	ldr	r0, [pc, #56]	@ (800536c <xTaskRemoveFromEventList+0xbc>)
 8005334:	f7fe fdcb 	bl	8003ece <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533c:	4b0c      	ldr	r3, [pc, #48]	@ (8005370 <xTaskRemoveFromEventList+0xc0>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005342:	429a      	cmp	r2, r3
 8005344:	d905      	bls.n	8005352 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005346:	2301      	movs	r3, #1
 8005348:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800534a:	4b0a      	ldr	r3, [pc, #40]	@ (8005374 <xTaskRemoveFromEventList+0xc4>)
 800534c:	2201      	movs	r2, #1
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	e001      	b.n	8005356 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005356:	697b      	ldr	r3, [r7, #20]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000dd8 	.word	0x20000dd8
 8005364:	20000db8 	.word	0x20000db8
 8005368:	200008e0 	.word	0x200008e0
 800536c:	20000d70 	.word	0x20000d70
 8005370:	200008dc 	.word	0x200008dc
 8005374:	20000dc4 	.word	0x20000dc4

08005378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005380:	4b06      	ldr	r3, [pc, #24]	@ (800539c <vTaskInternalSetTimeOutState+0x24>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005388:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <vTaskInternalSetTimeOutState+0x28>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	605a      	str	r2, [r3, #4]
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	20000dc8 	.word	0x20000dc8
 80053a0:	20000db4 	.word	0x20000db4

080053a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10b      	bne.n	80053cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	613b      	str	r3, [r7, #16]
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	60fb      	str	r3, [r7, #12]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80053ea:	f000 fe8d 	bl	8006108 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005464 <xTaskCheckForTimeOut+0xc0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d102      	bne.n	800540e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	e023      	b.n	8005456 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b15      	ldr	r3, [pc, #84]	@ (8005468 <xTaskCheckForTimeOut+0xc4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d007      	beq.n	800542a <xTaskCheckForTimeOut+0x86>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	429a      	cmp	r2, r3
 8005422:	d302      	bcc.n	800542a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005424:	2301      	movs	r3, #1
 8005426:	61fb      	str	r3, [r7, #28]
 8005428:	e015      	b.n	8005456 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	429a      	cmp	r2, r3
 8005432:	d20b      	bcs.n	800544c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	1ad2      	subs	r2, r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff ff99 	bl	8005378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	e004      	b.n	8005456 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005452:	2301      	movs	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005456:	f000 fe89 	bl	800616c <vPortExitCritical>

	return xReturn;
 800545a:	69fb      	ldr	r3, [r7, #28]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3720      	adds	r7, #32
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20000db4 	.word	0x20000db4
 8005468:	20000dc8 	.word	0x20000dc8

0800546c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005470:	4b03      	ldr	r3, [pc, #12]	@ (8005480 <vTaskMissedYield+0x14>)
 8005472:	2201      	movs	r2, #1
 8005474:	601a      	str	r2, [r3, #0]
}
 8005476:	bf00      	nop
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	20000dc4 	.word	0x20000dc4

08005484 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800548c:	f000 f852 	bl	8005534 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005490:	4b06      	ldr	r3, [pc, #24]	@ (80054ac <prvIdleTask+0x28>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d9f9      	bls.n	800548c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005498:	4b05      	ldr	r3, [pc, #20]	@ (80054b0 <prvIdleTask+0x2c>)
 800549a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054a8:	e7f0      	b.n	800548c <prvIdleTask+0x8>
 80054aa:	bf00      	nop
 80054ac:	200008e0 	.word	0x200008e0
 80054b0:	e000ed04 	.word	0xe000ed04

080054b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054ba:	2300      	movs	r3, #0
 80054bc:	607b      	str	r3, [r7, #4]
 80054be:	e00c      	b.n	80054da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4a12      	ldr	r2, [pc, #72]	@ (8005514 <prvInitialiseTaskLists+0x60>)
 80054cc:	4413      	add	r3, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe fcd0 	bl	8003e74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3301      	adds	r3, #1
 80054d8:	607b      	str	r3, [r7, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b37      	cmp	r3, #55	@ 0x37
 80054de:	d9ef      	bls.n	80054c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054e0:	480d      	ldr	r0, [pc, #52]	@ (8005518 <prvInitialiseTaskLists+0x64>)
 80054e2:	f7fe fcc7 	bl	8003e74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054e6:	480d      	ldr	r0, [pc, #52]	@ (800551c <prvInitialiseTaskLists+0x68>)
 80054e8:	f7fe fcc4 	bl	8003e74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054ec:	480c      	ldr	r0, [pc, #48]	@ (8005520 <prvInitialiseTaskLists+0x6c>)
 80054ee:	f7fe fcc1 	bl	8003e74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054f2:	480c      	ldr	r0, [pc, #48]	@ (8005524 <prvInitialiseTaskLists+0x70>)
 80054f4:	f7fe fcbe 	bl	8003e74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054f8:	480b      	ldr	r0, [pc, #44]	@ (8005528 <prvInitialiseTaskLists+0x74>)
 80054fa:	f7fe fcbb 	bl	8003e74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054fe:	4b0b      	ldr	r3, [pc, #44]	@ (800552c <prvInitialiseTaskLists+0x78>)
 8005500:	4a05      	ldr	r2, [pc, #20]	@ (8005518 <prvInitialiseTaskLists+0x64>)
 8005502:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005504:	4b0a      	ldr	r3, [pc, #40]	@ (8005530 <prvInitialiseTaskLists+0x7c>)
 8005506:	4a05      	ldr	r2, [pc, #20]	@ (800551c <prvInitialiseTaskLists+0x68>)
 8005508:	601a      	str	r2, [r3, #0]
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	200008e0 	.word	0x200008e0
 8005518:	20000d40 	.word	0x20000d40
 800551c:	20000d54 	.word	0x20000d54
 8005520:	20000d70 	.word	0x20000d70
 8005524:	20000d84 	.word	0x20000d84
 8005528:	20000d9c 	.word	0x20000d9c
 800552c:	20000d68 	.word	0x20000d68
 8005530:	20000d6c 	.word	0x20000d6c

08005534 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800553a:	e019      	b.n	8005570 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800553c:	f000 fde4 	bl	8006108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005540:	4b10      	ldr	r3, [pc, #64]	@ (8005584 <prvCheckTasksWaitingTermination+0x50>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3304      	adds	r3, #4
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe fd1b 	bl	8003f88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005552:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <prvCheckTasksWaitingTermination+0x54>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3b01      	subs	r3, #1
 8005558:	4a0b      	ldr	r2, [pc, #44]	@ (8005588 <prvCheckTasksWaitingTermination+0x54>)
 800555a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800555c:	4b0b      	ldr	r3, [pc, #44]	@ (800558c <prvCheckTasksWaitingTermination+0x58>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3b01      	subs	r3, #1
 8005562:	4a0a      	ldr	r2, [pc, #40]	@ (800558c <prvCheckTasksWaitingTermination+0x58>)
 8005564:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005566:	f000 fe01 	bl	800616c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f810 	bl	8005590 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005570:	4b06      	ldr	r3, [pc, #24]	@ (800558c <prvCheckTasksWaitingTermination+0x58>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e1      	bne.n	800553c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000d84 	.word	0x20000d84
 8005588:	20000db0 	.word	0x20000db0
 800558c:	20000d98 	.word	0x20000d98

08005590 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d108      	bne.n	80055b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 ff9e 	bl	80064e8 <vPortFree>
				vPortFree( pxTCB );
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 ff9b 	bl	80064e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055b2:	e019      	b.n	80055e8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d103      	bne.n	80055c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 ff92 	bl	80064e8 <vPortFree>
	}
 80055c4:	e010      	b.n	80055e8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d00b      	beq.n	80055e8 <prvDeleteTCB+0x58>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
}
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
 80055e6:	e7fd      	b.n	80055e4 <prvDeleteTCB+0x54>
	}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005628 <prvResetNextTaskUnblockTime+0x38>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d104      	bne.n	800560a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005600:	4b0a      	ldr	r3, [pc, #40]	@ (800562c <prvResetNextTaskUnblockTime+0x3c>)
 8005602:	f04f 32ff 	mov.w	r2, #4294967295
 8005606:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005608:	e008      	b.n	800561c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800560a:	4b07      	ldr	r3, [pc, #28]	@ (8005628 <prvResetNextTaskUnblockTime+0x38>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4a04      	ldr	r2, [pc, #16]	@ (800562c <prvResetNextTaskUnblockTime+0x3c>)
 800561a:	6013      	str	r3, [r2, #0]
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	20000d68 	.word	0x20000d68
 800562c:	20000dd0 	.word	0x20000dd0

08005630 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005636:	4b0b      	ldr	r3, [pc, #44]	@ (8005664 <xTaskGetSchedulerState+0x34>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d102      	bne.n	8005644 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800563e:	2301      	movs	r3, #1
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	e008      	b.n	8005656 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005644:	4b08      	ldr	r3, [pc, #32]	@ (8005668 <xTaskGetSchedulerState+0x38>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d102      	bne.n	8005652 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800564c:	2302      	movs	r3, #2
 800564e:	607b      	str	r3, [r7, #4]
 8005650:	e001      	b.n	8005656 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005652:	2300      	movs	r3, #0
 8005654:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005656:	687b      	ldr	r3, [r7, #4]
	}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	20000dbc 	.word	0x20000dbc
 8005668:	20000dd8 	.word	0x20000dd8

0800566c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d058      	beq.n	8005734 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005682:	4b2f      	ldr	r3, [pc, #188]	@ (8005740 <xTaskPriorityDisinherit+0xd4>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	429a      	cmp	r2, r3
 800568a:	d00b      	beq.n	80056a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	60fb      	str	r3, [r7, #12]
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	e7fd      	b.n	80056a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10b      	bne.n	80056c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	60bb      	str	r3, [r7, #8]
}
 80056be:	bf00      	nop
 80056c0:	bf00      	nop
 80056c2:	e7fd      	b.n	80056c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c8:	1e5a      	subs	r2, r3, #1
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d02c      	beq.n	8005734 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d128      	bne.n	8005734 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fc4e 	bl	8003f88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005704:	4b0f      	ldr	r3, [pc, #60]	@ (8005744 <xTaskPriorityDisinherit+0xd8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d903      	bls.n	8005714 <xTaskPriorityDisinherit+0xa8>
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005710:	4a0c      	ldr	r2, [pc, #48]	@ (8005744 <xTaskPriorityDisinherit+0xd8>)
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4a09      	ldr	r2, [pc, #36]	@ (8005748 <xTaskPriorityDisinherit+0xdc>)
 8005722:	441a      	add	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	3304      	adds	r3, #4
 8005728:	4619      	mov	r1, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f7fe fbcf 	bl	8003ece <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005730:	2301      	movs	r3, #1
 8005732:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005734:	697b      	ldr	r3, [r7, #20]
	}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200008dc 	.word	0x200008dc
 8005744:	20000db8 	.word	0x20000db8
 8005748:	200008e0 	.word	0x200008e0

0800574c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005756:	4b21      	ldr	r3, [pc, #132]	@ (80057dc <prvAddCurrentTaskToDelayedList+0x90>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800575c:	4b20      	ldr	r3, [pc, #128]	@ (80057e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3304      	adds	r3, #4
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fc10 	bl	8003f88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d10a      	bne.n	8005786 <prvAddCurrentTaskToDelayedList+0x3a>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005776:	4b1a      	ldr	r3, [pc, #104]	@ (80057e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3304      	adds	r3, #4
 800577c:	4619      	mov	r1, r3
 800577e:	4819      	ldr	r0, [pc, #100]	@ (80057e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005780:	f7fe fba5 	bl	8003ece <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005784:	e026      	b.n	80057d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4413      	add	r3, r2
 800578c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800578e:	4b14      	ldr	r3, [pc, #80]	@ (80057e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	429a      	cmp	r2, r3
 800579c:	d209      	bcs.n	80057b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800579e:	4b12      	ldr	r3, [pc, #72]	@ (80057e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b0f      	ldr	r3, [pc, #60]	@ (80057e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3304      	adds	r3, #4
 80057a8:	4619      	mov	r1, r3
 80057aa:	4610      	mov	r0, r2
 80057ac:	f7fe fbb3 	bl	8003f16 <vListInsert>
}
 80057b0:	e010      	b.n	80057d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057b2:	4b0e      	ldr	r3, [pc, #56]	@ (80057ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b0a      	ldr	r3, [pc, #40]	@ (80057e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f7fe fba9 	bl	8003f16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057c4:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d202      	bcs.n	80057d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057ce:	4a08      	ldr	r2, [pc, #32]	@ (80057f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6013      	str	r3, [r2, #0]
}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000db4 	.word	0x20000db4
 80057e0:	200008dc 	.word	0x200008dc
 80057e4:	20000d9c 	.word	0x20000d9c
 80057e8:	20000d6c 	.word	0x20000d6c
 80057ec:	20000d68 	.word	0x20000d68
 80057f0:	20000dd0 	.word	0x20000dd0

080057f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08a      	sub	sp, #40	@ 0x28
 80057f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057fe:	f000 fb13 	bl	8005e28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005802:	4b1d      	ldr	r3, [pc, #116]	@ (8005878 <xTimerCreateTimerTask+0x84>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d021      	beq.n	800584e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005812:	1d3a      	adds	r2, r7, #4
 8005814:	f107 0108 	add.w	r1, r7, #8
 8005818:	f107 030c 	add.w	r3, r7, #12
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe fb0f 	bl	8003e40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	9202      	str	r2, [sp, #8]
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	2302      	movs	r3, #2
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	2300      	movs	r3, #0
 8005832:	460a      	mov	r2, r1
 8005834:	4911      	ldr	r1, [pc, #68]	@ (800587c <xTimerCreateTimerTask+0x88>)
 8005836:	4812      	ldr	r0, [pc, #72]	@ (8005880 <xTimerCreateTimerTask+0x8c>)
 8005838:	f7ff f906 	bl	8004a48 <xTaskCreateStatic>
 800583c:	4603      	mov	r3, r0
 800583e:	4a11      	ldr	r2, [pc, #68]	@ (8005884 <xTimerCreateTimerTask+0x90>)
 8005840:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005842:	4b10      	ldr	r3, [pc, #64]	@ (8005884 <xTimerCreateTimerTask+0x90>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800584a:	2301      	movs	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	613b      	str	r3, [r7, #16]
}
 8005866:	bf00      	nop
 8005868:	bf00      	nop
 800586a:	e7fd      	b.n	8005868 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800586c:	697b      	ldr	r3, [r7, #20]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000e0c 	.word	0x20000e0c
 800587c:	08007448 	.word	0x08007448
 8005880:	080059c1 	.word	0x080059c1
 8005884:	20000e10 	.word	0x20000e10

08005888 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	@ 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005896:	2300      	movs	r3, #0
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10b      	bne.n	80058b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	623b      	str	r3, [r7, #32]
}
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
 80058b6:	e7fd      	b.n	80058b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058b8:	4b19      	ldr	r3, [pc, #100]	@ (8005920 <xTimerGenericCommand+0x98>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d02a      	beq.n	8005916 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b05      	cmp	r3, #5
 80058d0:	dc18      	bgt.n	8005904 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058d2:	f7ff fead 	bl	8005630 <xTaskGetSchedulerState>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d109      	bne.n	80058f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058dc:	4b10      	ldr	r3, [pc, #64]	@ (8005920 <xTimerGenericCommand+0x98>)
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	f107 0110 	add.w	r1, r7, #16
 80058e4:	2300      	movs	r3, #0
 80058e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058e8:	f7fe fcbe 	bl	8004268 <xQueueGenericSend>
 80058ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80058ee:	e012      	b.n	8005916 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <xTimerGenericCommand+0x98>)
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	f107 0110 	add.w	r1, r7, #16
 80058f8:	2300      	movs	r3, #0
 80058fa:	2200      	movs	r2, #0
 80058fc:	f7fe fcb4 	bl	8004268 <xQueueGenericSend>
 8005900:	6278      	str	r0, [r7, #36]	@ 0x24
 8005902:	e008      	b.n	8005916 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005904:	4b06      	ldr	r3, [pc, #24]	@ (8005920 <xTimerGenericCommand+0x98>)
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	f107 0110 	add.w	r1, r7, #16
 800590c:	2300      	movs	r3, #0
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	f7fe fdac 	bl	800446c <xQueueGenericSendFromISR>
 8005914:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005918:	4618      	mov	r0, r3
 800591a:	3728      	adds	r7, #40	@ 0x28
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20000e0c 	.word	0x20000e0c

08005924 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af02      	add	r7, sp, #8
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592e:	4b23      	ldr	r3, [pc, #140]	@ (80059bc <prvProcessExpiredTimer+0x98>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	3304      	adds	r3, #4
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fb23 	bl	8003f88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d023      	beq.n	8005998 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	699a      	ldr	r2, [r3, #24]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	18d1      	adds	r1, r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	6978      	ldr	r0, [r7, #20]
 800595e:	f000 f8d5 	bl	8005b0c <prvInsertTimerInActiveList>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d020      	beq.n	80059aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005968:	2300      	movs	r3, #0
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	2300      	movs	r3, #0
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	2100      	movs	r1, #0
 8005972:	6978      	ldr	r0, [r7, #20]
 8005974:	f7ff ff88 	bl	8005888 <xTimerGenericCommand>
 8005978:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d114      	bne.n	80059aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	60fb      	str	r3, [r7, #12]
}
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	e7fd      	b.n	8005994 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	6978      	ldr	r0, [r7, #20]
 80059b0:	4798      	blx	r3
}
 80059b2:	bf00      	nop
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000e04 	.word	0x20000e04

080059c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059c8:	f107 0308 	add.w	r3, r7, #8
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 f859 	bl	8005a84 <prvGetNextExpireTime>
 80059d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4619      	mov	r1, r3
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f805 	bl	80059e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059de:	f000 f8d7 	bl	8005b90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059e2:	bf00      	nop
 80059e4:	e7f0      	b.n	80059c8 <prvTimerTask+0x8>
	...

080059e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059f2:	f7ff fa37 	bl	8004e64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059f6:	f107 0308 	add.w	r3, r7, #8
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 f866 	bl	8005acc <prvSampleTimeNow>
 8005a00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d130      	bne.n	8005a6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <prvProcessTimerOrBlockTask+0x3c>
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d806      	bhi.n	8005a24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a16:	f7ff fa33 	bl	8004e80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ff81 	bl	8005924 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a22:	e024      	b.n	8005a6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a2a:	4b13      	ldr	r3, [pc, #76]	@ (8005a78 <prvProcessTimerOrBlockTask+0x90>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <prvProcessTimerOrBlockTask+0x50>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <prvProcessTimerOrBlockTask+0x52>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a7c <prvProcessTimerOrBlockTask+0x94>)
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f7fe ffc9 	bl	80049e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a4e:	f7ff fa17 	bl	8004e80 <xTaskResumeAll>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a58:	4b09      	ldr	r3, [pc, #36]	@ (8005a80 <prvProcessTimerOrBlockTask+0x98>)
 8005a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	f3bf 8f6f 	isb	sy
}
 8005a68:	e001      	b.n	8005a6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a6a:	f7ff fa09 	bl	8004e80 <xTaskResumeAll>
}
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20000e08 	.word	0x20000e08
 8005a7c:	20000e0c 	.word	0x20000e0c
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac8 <prvGetNextExpireTime+0x44>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <prvGetNextExpireTime+0x16>
 8005a96:	2201      	movs	r2, #1
 8005a98:	e000      	b.n	8005a9c <prvGetNextExpireTime+0x18>
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d105      	bne.n	8005ab4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005aa8:	4b07      	ldr	r3, [pc, #28]	@ (8005ac8 <prvGetNextExpireTime+0x44>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	e001      	b.n	8005ab8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000e04 	.word	0x20000e04

08005acc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ad4:	f7ff fa72 	bl	8004fbc <xTaskGetTickCount>
 8005ad8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ada:	4b0b      	ldr	r3, [pc, #44]	@ (8005b08 <prvSampleTimeNow+0x3c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d205      	bcs.n	8005af0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ae4:	f000 f93a 	bl	8005d5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005af6:	4a04      	ldr	r2, [pc, #16]	@ (8005b08 <prvSampleTimeNow+0x3c>)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005afc:	68fb      	ldr	r3, [r7, #12]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000e14 	.word	0x20000e14

08005b0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d812      	bhi.n	8005b58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	1ad2      	subs	r2, r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d302      	bcc.n	8005b46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b40:	2301      	movs	r3, #1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e01b      	b.n	8005b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b46:	4b10      	ldr	r3, [pc, #64]	@ (8005b88 <prvInsertTimerInActiveList+0x7c>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f7fe f9e0 	bl	8003f16 <vListInsert>
 8005b56:	e012      	b.n	8005b7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d206      	bcs.n	8005b6e <prvInsertTimerInActiveList+0x62>
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	e007      	b.n	8005b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b6e:	4b07      	ldr	r3, [pc, #28]	@ (8005b8c <prvInsertTimerInActiveList+0x80>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4619      	mov	r1, r3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f7fe f9cc 	bl	8003f16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b7e:	697b      	ldr	r3, [r7, #20]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000e08 	.word	0x20000e08
 8005b8c:	20000e04 	.word	0x20000e04

08005b90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08e      	sub	sp, #56	@ 0x38
 8005b94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b96:	e0ce      	b.n	8005d36 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da19      	bge.n	8005bd2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	61fb      	str	r3, [r7, #28]
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	e7fd      	b.n	8005bbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bc8:	6850      	ldr	r0, [r2, #4]
 8005bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bcc:	6892      	ldr	r2, [r2, #8]
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f2c0 80ae 	blt.w	8005d36 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be8:	3304      	adds	r3, #4
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe f9cc 	bl	8003f88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff ff6a 	bl	8005acc <prvSampleTimeNow>
 8005bf8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b09      	cmp	r3, #9
 8005bfe:	f200 8097 	bhi.w	8005d30 <prvProcessReceivedCommands+0x1a0>
 8005c02:	a201      	add	r2, pc, #4	@ (adr r2, 8005c08 <prvProcessReceivedCommands+0x78>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c31 	.word	0x08005c31
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c31 	.word	0x08005c31
 8005c14:	08005ca7 	.word	0x08005ca7
 8005c18:	08005cbb 	.word	0x08005cbb
 8005c1c:	08005d07 	.word	0x08005d07
 8005c20:	08005c31 	.word	0x08005c31
 8005c24:	08005c31 	.word	0x08005c31
 8005c28:	08005ca7 	.word	0x08005ca7
 8005c2c:	08005cbb 	.word	0x08005cbb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c36:	f043 0301 	orr.w	r3, r3, #1
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	18d1      	adds	r1, r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c50:	f7ff ff5c 	bl	8005b0c <prvInsertTimerInActiveList>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d06c      	beq.n	8005d34 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d061      	beq.n	8005d34 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	441a      	add	r2, r3
 8005c78:	2300      	movs	r3, #0
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2100      	movs	r1, #0
 8005c80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c82:	f7ff fe01 	bl	8005888 <xTimerGenericCommand>
 8005c86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d152      	bne.n	8005d34 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	61bb      	str	r3, [r7, #24]
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	e7fd      	b.n	8005ca2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005cb8:	e03d      	b.n	8005d36 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10b      	bne.n	8005cf2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	617b      	str	r3, [r7, #20]
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	e7fd      	b.n	8005cee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	18d1      	adds	r1, r2, r3
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d00:	f7ff ff04 	bl	8005b0c <prvInsertTimerInActiveList>
					break;
 8005d04:	e017      	b.n	8005d36 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d103      	bne.n	8005d1c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005d14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d16:	f000 fbe7 	bl	80064e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d1a:	e00c      	b.n	8005d36 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005d2e:	e002      	b.n	8005d36 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005d30:	bf00      	nop
 8005d32:	e000      	b.n	8005d36 <prvProcessReceivedCommands+0x1a6>
					break;
 8005d34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d36:	4b08      	ldr	r3, [pc, #32]	@ (8005d58 <prvProcessReceivedCommands+0x1c8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	1d39      	adds	r1, r7, #4
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe fc32 	bl	80045a8 <xQueueReceive>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f47f af26 	bne.w	8005b98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	3730      	adds	r7, #48	@ 0x30
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000e0c 	.word	0x20000e0c

08005d5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d62:	e049      	b.n	8005df8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d64:	4b2e      	ldr	r3, [pc, #184]	@ (8005e20 <prvSwitchTimerLists+0xc4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8005e20 <prvSwitchTimerLists+0xc4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fe f903 	bl	8003f88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d02f      	beq.n	8005df8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4413      	add	r3, r2
 8005da0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d90e      	bls.n	8005dc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005db6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e20 <prvSwitchTimerLists+0xc4>)
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	f7fe f8a8 	bl	8003f16 <vListInsert>
 8005dc6:	e017      	b.n	8005df8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f7ff fd58 	bl	8005888 <xTimerGenericCommand>
 8005dd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10b      	bne.n	8005df8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	603b      	str	r3, [r7, #0]
}
 8005df2:	bf00      	nop
 8005df4:	bf00      	nop
 8005df6:	e7fd      	b.n	8005df4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005df8:	4b09      	ldr	r3, [pc, #36]	@ (8005e20 <prvSwitchTimerLists+0xc4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1b0      	bne.n	8005d64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e02:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <prvSwitchTimerLists+0xc4>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e08:	4b06      	ldr	r3, [pc, #24]	@ (8005e24 <prvSwitchTimerLists+0xc8>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a04      	ldr	r2, [pc, #16]	@ (8005e20 <prvSwitchTimerLists+0xc4>)
 8005e0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e10:	4a04      	ldr	r2, [pc, #16]	@ (8005e24 <prvSwitchTimerLists+0xc8>)
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	6013      	str	r3, [r2, #0]
}
 8005e16:	bf00      	nop
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000e04 	.word	0x20000e04
 8005e24:	20000e08 	.word	0x20000e08

08005e28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e2e:	f000 f96b 	bl	8006108 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e32:	4b15      	ldr	r3, [pc, #84]	@ (8005e88 <prvCheckForValidListAndQueue+0x60>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d120      	bne.n	8005e7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e3a:	4814      	ldr	r0, [pc, #80]	@ (8005e8c <prvCheckForValidListAndQueue+0x64>)
 8005e3c:	f7fe f81a 	bl	8003e74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e40:	4813      	ldr	r0, [pc, #76]	@ (8005e90 <prvCheckForValidListAndQueue+0x68>)
 8005e42:	f7fe f817 	bl	8003e74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e46:	4b13      	ldr	r3, [pc, #76]	@ (8005e94 <prvCheckForValidListAndQueue+0x6c>)
 8005e48:	4a10      	ldr	r2, [pc, #64]	@ (8005e8c <prvCheckForValidListAndQueue+0x64>)
 8005e4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e4c:	4b12      	ldr	r3, [pc, #72]	@ (8005e98 <prvCheckForValidListAndQueue+0x70>)
 8005e4e:	4a10      	ldr	r2, [pc, #64]	@ (8005e90 <prvCheckForValidListAndQueue+0x68>)
 8005e50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e52:	2300      	movs	r3, #0
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	4b11      	ldr	r3, [pc, #68]	@ (8005e9c <prvCheckForValidListAndQueue+0x74>)
 8005e58:	4a11      	ldr	r2, [pc, #68]	@ (8005ea0 <prvCheckForValidListAndQueue+0x78>)
 8005e5a:	2110      	movs	r1, #16
 8005e5c:	200a      	movs	r0, #10
 8005e5e:	f7fe f927 	bl	80040b0 <xQueueGenericCreateStatic>
 8005e62:	4603      	mov	r3, r0
 8005e64:	4a08      	ldr	r2, [pc, #32]	@ (8005e88 <prvCheckForValidListAndQueue+0x60>)
 8005e66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e68:	4b07      	ldr	r3, [pc, #28]	@ (8005e88 <prvCheckForValidListAndQueue+0x60>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e70:	4b05      	ldr	r3, [pc, #20]	@ (8005e88 <prvCheckForValidListAndQueue+0x60>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	490b      	ldr	r1, [pc, #44]	@ (8005ea4 <prvCheckForValidListAndQueue+0x7c>)
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fd88 	bl	800498c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e7c:	f000 f976 	bl	800616c <vPortExitCritical>
}
 8005e80:	bf00      	nop
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000e0c 	.word	0x20000e0c
 8005e8c:	20000ddc 	.word	0x20000ddc
 8005e90:	20000df0 	.word	0x20000df0
 8005e94:	20000e04 	.word	0x20000e04
 8005e98:	20000e08 	.word	0x20000e08
 8005e9c:	20000eb8 	.word	0x20000eb8
 8005ea0:	20000e18 	.word	0x20000e18
 8005ea4:	08007450 	.word	0x08007450

08005ea8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3b04      	subs	r3, #4
 8005eb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3b04      	subs	r3, #4
 8005ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f023 0201 	bic.w	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3b04      	subs	r3, #4
 8005ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8005f0c <pxPortInitialiseStack+0x64>)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3b14      	subs	r3, #20
 8005ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3b04      	subs	r3, #4
 8005eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f06f 0202 	mvn.w	r2, #2
 8005ef6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3b20      	subs	r3, #32
 8005efc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005efe:	68fb      	ldr	r3, [r7, #12]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	08005f11 	.word	0x08005f11

08005f10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f1a:	4b13      	ldr	r3, [pc, #76]	@ (8005f68 <prvTaskExitError+0x58>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	d00b      	beq.n	8005f3c <prvTaskExitError+0x2c>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	60fb      	str	r3, [r7, #12]
}
 8005f36:	bf00      	nop
 8005f38:	bf00      	nop
 8005f3a:	e7fd      	b.n	8005f38 <prvTaskExitError+0x28>
	__asm volatile
 8005f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	60bb      	str	r3, [r7, #8]
}
 8005f4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f50:	bf00      	nop
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0fc      	beq.n	8005f52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	2000000c 	.word	0x2000000c
 8005f6c:	00000000 	.word	0x00000000

08005f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f70:	4b07      	ldr	r3, [pc, #28]	@ (8005f90 <pxCurrentTCBConst2>)
 8005f72:	6819      	ldr	r1, [r3, #0]
 8005f74:	6808      	ldr	r0, [r1, #0]
 8005f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7a:	f380 8809 	msr	PSP, r0
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f04f 0000 	mov.w	r0, #0
 8005f86:	f380 8811 	msr	BASEPRI, r0
 8005f8a:	4770      	bx	lr
 8005f8c:	f3af 8000 	nop.w

08005f90 <pxCurrentTCBConst2>:
 8005f90:	200008dc 	.word	0x200008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop

08005f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f98:	4808      	ldr	r0, [pc, #32]	@ (8005fbc <prvPortStartFirstTask+0x24>)
 8005f9a:	6800      	ldr	r0, [r0, #0]
 8005f9c:	6800      	ldr	r0, [r0, #0]
 8005f9e:	f380 8808 	msr	MSP, r0
 8005fa2:	f04f 0000 	mov.w	r0, #0
 8005fa6:	f380 8814 	msr	CONTROL, r0
 8005faa:	b662      	cpsie	i
 8005fac:	b661      	cpsie	f
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	df00      	svc	0
 8005fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fba:	bf00      	nop
 8005fbc:	e000ed08 	.word	0xe000ed08

08005fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fc6:	4b47      	ldr	r3, [pc, #284]	@ (80060e4 <xPortStartScheduler+0x124>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a47      	ldr	r2, [pc, #284]	@ (80060e8 <xPortStartScheduler+0x128>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d10b      	bne.n	8005fe8 <xPortStartScheduler+0x28>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	613b      	str	r3, [r7, #16]
}
 8005fe2:	bf00      	nop
 8005fe4:	bf00      	nop
 8005fe6:	e7fd      	b.n	8005fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80060e4 <xPortStartScheduler+0x124>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a3f      	ldr	r2, [pc, #252]	@ (80060ec <xPortStartScheduler+0x12c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d10b      	bne.n	800600a <xPortStartScheduler+0x4a>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	60fb      	str	r3, [r7, #12]
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	e7fd      	b.n	8006006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800600a:	4b39      	ldr	r3, [pc, #228]	@ (80060f0 <xPortStartScheduler+0x130>)
 800600c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	22ff      	movs	r2, #255	@ 0xff
 800601a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800602c:	b2da      	uxtb	r2, r3
 800602e:	4b31      	ldr	r3, [pc, #196]	@ (80060f4 <xPortStartScheduler+0x134>)
 8006030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006032:	4b31      	ldr	r3, [pc, #196]	@ (80060f8 <xPortStartScheduler+0x138>)
 8006034:	2207      	movs	r2, #7
 8006036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006038:	e009      	b.n	800604e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800603a:	4b2f      	ldr	r3, [pc, #188]	@ (80060f8 <xPortStartScheduler+0x138>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3b01      	subs	r3, #1
 8006040:	4a2d      	ldr	r2, [pc, #180]	@ (80060f8 <xPortStartScheduler+0x138>)
 8006042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	b2db      	uxtb	r3, r3
 800604c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006056:	2b80      	cmp	r3, #128	@ 0x80
 8006058:	d0ef      	beq.n	800603a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800605a:	4b27      	ldr	r3, [pc, #156]	@ (80060f8 <xPortStartScheduler+0x138>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f1c3 0307 	rsb	r3, r3, #7
 8006062:	2b04      	cmp	r3, #4
 8006064:	d00b      	beq.n	800607e <xPortStartScheduler+0xbe>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	60bb      	str	r3, [r7, #8]
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	e7fd      	b.n	800607a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800607e:	4b1e      	ldr	r3, [pc, #120]	@ (80060f8 <xPortStartScheduler+0x138>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	4a1c      	ldr	r2, [pc, #112]	@ (80060f8 <xPortStartScheduler+0x138>)
 8006086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006088:	4b1b      	ldr	r3, [pc, #108]	@ (80060f8 <xPortStartScheduler+0x138>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006090:	4a19      	ldr	r2, [pc, #100]	@ (80060f8 <xPortStartScheduler+0x138>)
 8006092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	b2da      	uxtb	r2, r3
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800609c:	4b17      	ldr	r3, [pc, #92]	@ (80060fc <xPortStartScheduler+0x13c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a16      	ldr	r2, [pc, #88]	@ (80060fc <xPortStartScheduler+0x13c>)
 80060a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060a8:	4b14      	ldr	r3, [pc, #80]	@ (80060fc <xPortStartScheduler+0x13c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a13      	ldr	r2, [pc, #76]	@ (80060fc <xPortStartScheduler+0x13c>)
 80060ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80060b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060b4:	f000 f8da 	bl	800626c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060b8:	4b11      	ldr	r3, [pc, #68]	@ (8006100 <xPortStartScheduler+0x140>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060be:	f000 f8f9 	bl	80062b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060c2:	4b10      	ldr	r3, [pc, #64]	@ (8006104 <xPortStartScheduler+0x144>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006104 <xPortStartScheduler+0x144>)
 80060c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80060cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060ce:	f7ff ff63 	bl	8005f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060d2:	f7ff f83d 	bl	8005150 <vTaskSwitchContext>
	prvTaskExitError();
 80060d6:	f7ff ff1b 	bl	8005f10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	e000ed00 	.word	0xe000ed00
 80060e8:	410fc271 	.word	0x410fc271
 80060ec:	410fc270 	.word	0x410fc270
 80060f0:	e000e400 	.word	0xe000e400
 80060f4:	20000f08 	.word	0x20000f08
 80060f8:	20000f0c 	.word	0x20000f0c
 80060fc:	e000ed20 	.word	0xe000ed20
 8006100:	2000000c 	.word	0x2000000c
 8006104:	e000ef34 	.word	0xe000ef34

08006108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
}
 8006120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006122:	4b10      	ldr	r3, [pc, #64]	@ (8006164 <vPortEnterCritical+0x5c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3301      	adds	r3, #1
 8006128:	4a0e      	ldr	r2, [pc, #56]	@ (8006164 <vPortEnterCritical+0x5c>)
 800612a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800612c:	4b0d      	ldr	r3, [pc, #52]	@ (8006164 <vPortEnterCritical+0x5c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d110      	bne.n	8006156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006134:	4b0c      	ldr	r3, [pc, #48]	@ (8006168 <vPortEnterCritical+0x60>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00b      	beq.n	8006156 <vPortEnterCritical+0x4e>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	603b      	str	r3, [r7, #0]
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	e7fd      	b.n	8006152 <vPortEnterCritical+0x4a>
	}
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	2000000c 	.word	0x2000000c
 8006168:	e000ed04 	.word	0xe000ed04

0800616c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006172:	4b12      	ldr	r3, [pc, #72]	@ (80061bc <vPortExitCritical+0x50>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <vPortExitCritical+0x26>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	607b      	str	r3, [r7, #4]
}
 800618c:	bf00      	nop
 800618e:	bf00      	nop
 8006190:	e7fd      	b.n	800618e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006192:	4b0a      	ldr	r3, [pc, #40]	@ (80061bc <vPortExitCritical+0x50>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3b01      	subs	r3, #1
 8006198:	4a08      	ldr	r2, [pc, #32]	@ (80061bc <vPortExitCritical+0x50>)
 800619a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800619c:	4b07      	ldr	r3, [pc, #28]	@ (80061bc <vPortExitCritical+0x50>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <vPortExitCritical+0x44>
 80061a4:	2300      	movs	r3, #0
 80061a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	f383 8811 	msr	BASEPRI, r3
}
 80061ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	2000000c 	.word	0x2000000c

080061c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061c0:	f3ef 8009 	mrs	r0, PSP
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	4b15      	ldr	r3, [pc, #84]	@ (8006220 <pxCurrentTCBConst>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	f01e 0f10 	tst.w	lr, #16
 80061d0:	bf08      	it	eq
 80061d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061da:	6010      	str	r0, [r2, #0]
 80061dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061e4:	f380 8811 	msr	BASEPRI, r0
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f7fe ffae 	bl	8005150 <vTaskSwitchContext>
 80061f4:	f04f 0000 	mov.w	r0, #0
 80061f8:	f380 8811 	msr	BASEPRI, r0
 80061fc:	bc09      	pop	{r0, r3}
 80061fe:	6819      	ldr	r1, [r3, #0]
 8006200:	6808      	ldr	r0, [r1, #0]
 8006202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006206:	f01e 0f10 	tst.w	lr, #16
 800620a:	bf08      	it	eq
 800620c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006210:	f380 8809 	msr	PSP, r0
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	f3af 8000 	nop.w

08006220 <pxCurrentTCBConst>:
 8006220:	200008dc 	.word	0x200008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop

08006228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	607b      	str	r3, [r7, #4]
}
 8006240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006242:	f7fe fecb 	bl	8004fdc <xTaskIncrementTick>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800624c:	4b06      	ldr	r3, [pc, #24]	@ (8006268 <xPortSysTickHandler+0x40>)
 800624e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	2300      	movs	r3, #0
 8006256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	f383 8811 	msr	BASEPRI, r3
}
 800625e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006260:	bf00      	nop
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	e000ed04 	.word	0xe000ed04

0800626c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006270:	4b0b      	ldr	r3, [pc, #44]	@ (80062a0 <vPortSetupTimerInterrupt+0x34>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006276:	4b0b      	ldr	r3, [pc, #44]	@ (80062a4 <vPortSetupTimerInterrupt+0x38>)
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800627c:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <vPortSetupTimerInterrupt+0x3c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a0a      	ldr	r2, [pc, #40]	@ (80062ac <vPortSetupTimerInterrupt+0x40>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	099b      	lsrs	r3, r3, #6
 8006288:	4a09      	ldr	r2, [pc, #36]	@ (80062b0 <vPortSetupTimerInterrupt+0x44>)
 800628a:	3b01      	subs	r3, #1
 800628c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800628e:	4b04      	ldr	r3, [pc, #16]	@ (80062a0 <vPortSetupTimerInterrupt+0x34>)
 8006290:	2207      	movs	r2, #7
 8006292:	601a      	str	r2, [r3, #0]
}
 8006294:	bf00      	nop
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	e000e010 	.word	0xe000e010
 80062a4:	e000e018 	.word	0xe000e018
 80062a8:	20000000 	.word	0x20000000
 80062ac:	10624dd3 	.word	0x10624dd3
 80062b0:	e000e014 	.word	0xe000e014

080062b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80062c4 <vPortEnableVFP+0x10>
 80062b8:	6801      	ldr	r1, [r0, #0]
 80062ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80062be:	6001      	str	r1, [r0, #0]
 80062c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062c2:	bf00      	nop
 80062c4:	e000ed88 	.word	0xe000ed88

080062c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062ce:	f3ef 8305 	mrs	r3, IPSR
 80062d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b0f      	cmp	r3, #15
 80062d8:	d915      	bls.n	8006306 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062da:	4a18      	ldr	r2, [pc, #96]	@ (800633c <vPortValidateInterruptPriority+0x74>)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062e4:	4b16      	ldr	r3, [pc, #88]	@ (8006340 <vPortValidateInterruptPriority+0x78>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	7afa      	ldrb	r2, [r7, #11]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d20b      	bcs.n	8006306 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006306:	4b0f      	ldr	r3, [pc, #60]	@ (8006344 <vPortValidateInterruptPriority+0x7c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800630e:	4b0e      	ldr	r3, [pc, #56]	@ (8006348 <vPortValidateInterruptPriority+0x80>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d90b      	bls.n	800632e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	603b      	str	r3, [r7, #0]
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	e7fd      	b.n	800632a <vPortValidateInterruptPriority+0x62>
	}
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	e000e3f0 	.word	0xe000e3f0
 8006340:	20000f08 	.word	0x20000f08
 8006344:	e000ed0c 	.word	0xe000ed0c
 8006348:	20000f0c 	.word	0x20000f0c

0800634c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08a      	sub	sp, #40	@ 0x28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006358:	f7fe fd84 	bl	8004e64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800635c:	4b5c      	ldr	r3, [pc, #368]	@ (80064d0 <pvPortMalloc+0x184>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006364:	f000 f924 	bl	80065b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006368:	4b5a      	ldr	r3, [pc, #360]	@ (80064d4 <pvPortMalloc+0x188>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	f040 8095 	bne.w	80064a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01e      	beq.n	80063ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800637c:	2208      	movs	r2, #8
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4413      	add	r3, r2
 8006382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	2b00      	cmp	r3, #0
 800638c:	d015      	beq.n	80063ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f023 0307 	bic.w	r3, r3, #7
 8006394:	3308      	adds	r3, #8
 8006396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00b      	beq.n	80063ba <pvPortMalloc+0x6e>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	617b      	str	r3, [r7, #20]
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	e7fd      	b.n	80063b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d06f      	beq.n	80064a0 <pvPortMalloc+0x154>
 80063c0:	4b45      	ldr	r3, [pc, #276]	@ (80064d8 <pvPortMalloc+0x18c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d86a      	bhi.n	80064a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063ca:	4b44      	ldr	r3, [pc, #272]	@ (80064dc <pvPortMalloc+0x190>)
 80063cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063ce:	4b43      	ldr	r3, [pc, #268]	@ (80064dc <pvPortMalloc+0x190>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063d4:	e004      	b.n	80063e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d903      	bls.n	80063f2 <pvPortMalloc+0xa6>
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f1      	bne.n	80063d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063f2:	4b37      	ldr	r3, [pc, #220]	@ (80064d0 <pvPortMalloc+0x184>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d051      	beq.n	80064a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2208      	movs	r2, #8
 8006402:	4413      	add	r3, r2
 8006404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1ad2      	subs	r2, r2, r3
 8006416:	2308      	movs	r3, #8
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	429a      	cmp	r2, r3
 800641c:	d920      	bls.n	8006460 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800641e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4413      	add	r3, r2
 8006424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <pvPortMalloc+0xfc>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	613b      	str	r3, [r7, #16]
}
 8006442:	bf00      	nop
 8006444:	bf00      	nop
 8006446:	e7fd      	b.n	8006444 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	1ad2      	subs	r2, r2, r3
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800645a:	69b8      	ldr	r0, [r7, #24]
 800645c:	f000 f90a 	bl	8006674 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006460:	4b1d      	ldr	r3, [pc, #116]	@ (80064d8 <pvPortMalloc+0x18c>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	4a1b      	ldr	r2, [pc, #108]	@ (80064d8 <pvPortMalloc+0x18c>)
 800646c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800646e:	4b1a      	ldr	r3, [pc, #104]	@ (80064d8 <pvPortMalloc+0x18c>)
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4b1b      	ldr	r3, [pc, #108]	@ (80064e0 <pvPortMalloc+0x194>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d203      	bcs.n	8006482 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800647a:	4b17      	ldr	r3, [pc, #92]	@ (80064d8 <pvPortMalloc+0x18c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a18      	ldr	r2, [pc, #96]	@ (80064e0 <pvPortMalloc+0x194>)
 8006480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	4b13      	ldr	r3, [pc, #76]	@ (80064d4 <pvPortMalloc+0x188>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	431a      	orrs	r2, r3
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006496:	4b13      	ldr	r3, [pc, #76]	@ (80064e4 <pvPortMalloc+0x198>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3301      	adds	r3, #1
 800649c:	4a11      	ldr	r2, [pc, #68]	@ (80064e4 <pvPortMalloc+0x198>)
 800649e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064a0:	f7fe fcee 	bl	8004e80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00b      	beq.n	80064c6 <pvPortMalloc+0x17a>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	60fb      	str	r3, [r7, #12]
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	e7fd      	b.n	80064c2 <pvPortMalloc+0x176>
	return pvReturn;
 80064c6:	69fb      	ldr	r3, [r7, #28]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3728      	adds	r7, #40	@ 0x28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20004b18 	.word	0x20004b18
 80064d4:	20004b2c 	.word	0x20004b2c
 80064d8:	20004b1c 	.word	0x20004b1c
 80064dc:	20004b10 	.word	0x20004b10
 80064e0:	20004b20 	.word	0x20004b20
 80064e4:	20004b24 	.word	0x20004b24

080064e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d04f      	beq.n	800659a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064fa:	2308      	movs	r3, #8
 80064fc:	425b      	negs	r3, r3
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4413      	add	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	4b25      	ldr	r3, [pc, #148]	@ (80065a4 <vPortFree+0xbc>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4013      	ands	r3, r2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <vPortFree+0x46>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	60fb      	str	r3, [r7, #12]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <vPortFree+0x66>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	60bb      	str	r3, [r7, #8]
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	e7fd      	b.n	800654a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	4b14      	ldr	r3, [pc, #80]	@ (80065a4 <vPortFree+0xbc>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4013      	ands	r3, r2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d01e      	beq.n	800659a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11a      	bne.n	800659a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	4b0e      	ldr	r3, [pc, #56]	@ (80065a4 <vPortFree+0xbc>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	43db      	mvns	r3, r3
 800656e:	401a      	ands	r2, r3
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006574:	f7fe fc76 	bl	8004e64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <vPortFree+0xc0>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4413      	add	r3, r2
 8006582:	4a09      	ldr	r2, [pc, #36]	@ (80065a8 <vPortFree+0xc0>)
 8006584:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006586:	6938      	ldr	r0, [r7, #16]
 8006588:	f000 f874 	bl	8006674 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800658c:	4b07      	ldr	r3, [pc, #28]	@ (80065ac <vPortFree+0xc4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a06      	ldr	r2, [pc, #24]	@ (80065ac <vPortFree+0xc4>)
 8006594:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006596:	f7fe fc73 	bl	8004e80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800659a:	bf00      	nop
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20004b2c 	.word	0x20004b2c
 80065a8:	20004b1c 	.word	0x20004b1c
 80065ac:	20004b28 	.word	0x20004b28

080065b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80065ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065bc:	4b27      	ldr	r3, [pc, #156]	@ (800665c <prvHeapInit+0xac>)
 80065be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00c      	beq.n	80065e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3307      	adds	r3, #7
 80065ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0307 	bic.w	r3, r3, #7
 80065d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	4a1f      	ldr	r2, [pc, #124]	@ (800665c <prvHeapInit+0xac>)
 80065e0:	4413      	add	r3, r2
 80065e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006660 <prvHeapInit+0xb0>)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006660 <prvHeapInit+0xb0>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	4413      	add	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065fc:	2208      	movs	r2, #8
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1a9b      	subs	r3, r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0307 	bic.w	r3, r3, #7
 800660a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4a15      	ldr	r2, [pc, #84]	@ (8006664 <prvHeapInit+0xb4>)
 8006610:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006612:	4b14      	ldr	r3, [pc, #80]	@ (8006664 <prvHeapInit+0xb4>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2200      	movs	r2, #0
 8006618:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800661a:	4b12      	ldr	r3, [pc, #72]	@ (8006664 <prvHeapInit+0xb4>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2200      	movs	r2, #0
 8006620:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	1ad2      	subs	r2, r2, r3
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006630:	4b0c      	ldr	r3, [pc, #48]	@ (8006664 <prvHeapInit+0xb4>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	4a0a      	ldr	r2, [pc, #40]	@ (8006668 <prvHeapInit+0xb8>)
 800663e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	4a09      	ldr	r2, [pc, #36]	@ (800666c <prvHeapInit+0xbc>)
 8006646:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006648:	4b09      	ldr	r3, [pc, #36]	@ (8006670 <prvHeapInit+0xc0>)
 800664a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800664e:	601a      	str	r2, [r3, #0]
}
 8006650:	bf00      	nop
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	20000f10 	.word	0x20000f10
 8006660:	20004b10 	.word	0x20004b10
 8006664:	20004b18 	.word	0x20004b18
 8006668:	20004b20 	.word	0x20004b20
 800666c:	20004b1c 	.word	0x20004b1c
 8006670:	20004b2c 	.word	0x20004b2c

08006674 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800667c:	4b28      	ldr	r3, [pc, #160]	@ (8006720 <prvInsertBlockIntoFreeList+0xac>)
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	e002      	b.n	8006688 <prvInsertBlockIntoFreeList+0x14>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	429a      	cmp	r2, r3
 8006690:	d8f7      	bhi.n	8006682 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	4413      	add	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d108      	bne.n	80066b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	441a      	add	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	441a      	add	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d118      	bne.n	80066fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b15      	ldr	r3, [pc, #84]	@ (8006724 <prvInsertBlockIntoFreeList+0xb0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d00d      	beq.n	80066f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	441a      	add	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	e008      	b.n	8006704 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006724 <prvInsertBlockIntoFreeList+0xb0>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e003      	b.n	8006704 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	429a      	cmp	r2, r3
 800670a:	d002      	beq.n	8006712 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20004b10 	.word	0x20004b10
 8006724:	20004b18 	.word	0x20004b18

08006728 <cs43l22_reset>:
static inline bool cs43l22_gpio_init();
//TODO:This function will moved there from main
static inline bool cs43l22_i2c1_init(void);
static inline void cs43l22_reset();

inline void cs43l22_reset(){
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* PD4 assign as a reset pin.*/
	HAL_GPIO_WritePin(GPIOD, CS43L22_RESET_PIN, GPIO_PIN_SET);
 800672c:	2201      	movs	r2, #1
 800672e:	2110      	movs	r1, #16
 8006730:	4802      	ldr	r0, [pc, #8]	@ (800673c <cs43l22_reset+0x14>)
 8006732:	f7fb f98d 	bl	8001a50 <HAL_GPIO_WritePin>
}
 8006736:	bf00      	nop
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40020c00 	.word	0x40020c00

08006740 <cs43l22_config>:

bool cs43l22_config(){
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af04      	add	r7, sp, #16
  uint8_t byte;

  /*Set high to reset signal.*/
  cs43l22_reset();
 8006746:	f7ff ffef 	bl	8006728 <cs43l22_reset>

  /*Power Down)*/
  byte = 0x01;
 800674a:	2301      	movs	r3, #1
 800674c:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_CTRL1_REG_ADDR, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 800674e:	2364      	movs	r3, #100	@ 0x64
 8006750:	9302      	str	r3, [sp, #8]
 8006752:	2301      	movs	r3, #1
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	1dfb      	adds	r3, r7, #7
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	2301      	movs	r3, #1
 800675c:	2202      	movs	r2, #2
 800675e:	2194      	movs	r1, #148	@ 0x94
 8006760:	48a1      	ldr	r0, [pc, #644]	@ (80069e8 <cs43l22_config+0x2a8>)
 8006762:	f7fb fad3 	bl	8001d0c <HAL_I2C_Mem_Write>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <cs43l22_config+0x30>
    return false;
 800676c:	2300      	movs	r3, #0
 800676e:	e137      	b.n	80069e0 <cs43l22_config+0x2a0>

  /*Five steps to apply required initialization.*/
  /* Step 1 */
  byte = 0x99;
 8006770:	2399      	movs	r3, #153	@ 0x99
 8006772:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_INIT_SEQ_REGISTER_1, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 8006774:	2364      	movs	r3, #100	@ 0x64
 8006776:	9302      	str	r3, [sp, #8]
 8006778:	2301      	movs	r3, #1
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	1dfb      	adds	r3, r7, #7
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	2301      	movs	r3, #1
 8006782:	2200      	movs	r2, #0
 8006784:	2194      	movs	r1, #148	@ 0x94
 8006786:	4898      	ldr	r0, [pc, #608]	@ (80069e8 <cs43l22_config+0x2a8>)
 8006788:	f7fb fac0 	bl	8001d0c <HAL_I2C_Mem_Write>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <cs43l22_config+0x56>
    return false;
 8006792:	2300      	movs	r3, #0
 8006794:	e124      	b.n	80069e0 <cs43l22_config+0x2a0>

  /* Step 2 */
  byte = 0x81;
 8006796:	2381      	movs	r3, #129	@ 0x81
 8006798:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_INIT_SEQ_REGISTER_2, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 800679a:	2364      	movs	r3, #100	@ 0x64
 800679c:	9302      	str	r3, [sp, #8]
 800679e:	2301      	movs	r3, #1
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	1dfb      	adds	r3, r7, #7
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	2301      	movs	r3, #1
 80067a8:	2247      	movs	r2, #71	@ 0x47
 80067aa:	2194      	movs	r1, #148	@ 0x94
 80067ac:	488e      	ldr	r0, [pc, #568]	@ (80069e8 <cs43l22_config+0x2a8>)
 80067ae:	f7fb faad 	bl	8001d0c <HAL_I2C_Mem_Write>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <cs43l22_config+0x7c>
    return false;
 80067b8:	2300      	movs	r3, #0
 80067ba:	e111      	b.n	80069e0 <cs43l22_config+0x2a0>

  /* Step 3 */
  byte = 0x00;
 80067bc:	2300      	movs	r3, #0
 80067be:	71fb      	strb	r3, [r7, #7]
  byte = (1 << 7);
 80067c0:	2380      	movs	r3, #128	@ 0x80
 80067c2:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_INIT_SEQ_REGISTER_3, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 80067c4:	2364      	movs	r3, #100	@ 0x64
 80067c6:	9302      	str	r3, [sp, #8]
 80067c8:	2301      	movs	r3, #1
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	1dfb      	adds	r3, r7, #7
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	2301      	movs	r3, #1
 80067d2:	2232      	movs	r2, #50	@ 0x32
 80067d4:	2194      	movs	r1, #148	@ 0x94
 80067d6:	4884      	ldr	r0, [pc, #528]	@ (80069e8 <cs43l22_config+0x2a8>)
 80067d8:	f7fb fa98 	bl	8001d0c <HAL_I2C_Mem_Write>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <cs43l22_config+0xa6>
    return false;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e0fc      	b.n	80069e0 <cs43l22_config+0x2a0>

  /* Step 4 */
  byte = 0x00;
 80067e6:	2300      	movs	r3, #0
 80067e8:	71fb      	strb	r3, [r7, #7]
  byte &= ~(1 << 7);
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_INIT_SEQ_REGISTER_3, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 80067f4:	2364      	movs	r3, #100	@ 0x64
 80067f6:	9302      	str	r3, [sp, #8]
 80067f8:	2301      	movs	r3, #1
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	1dfb      	adds	r3, r7, #7
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	2301      	movs	r3, #1
 8006802:	2232      	movs	r2, #50	@ 0x32
 8006804:	2194      	movs	r1, #148	@ 0x94
 8006806:	4878      	ldr	r0, [pc, #480]	@ (80069e8 <cs43l22_config+0x2a8>)
 8006808:	f7fb fa80 	bl	8001d0c <HAL_I2C_Mem_Write>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <cs43l22_config+0xd6>
    return false;
 8006812:	2300      	movs	r3, #0
 8006814:	e0e4      	b.n	80069e0 <cs43l22_config+0x2a0>

  /* Step 5 */
  byte = 0x00;
 8006816:	2300      	movs	r3, #0
 8006818:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_INIT_SEQ_REGISTER_1, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 800681a:	2364      	movs	r3, #100	@ 0x64
 800681c:	9302      	str	r3, [sp, #8]
 800681e:	2301      	movs	r3, #1
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	1dfb      	adds	r3, r7, #7
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2301      	movs	r3, #1
 8006828:	2200      	movs	r2, #0
 800682a:	2194      	movs	r1, #148	@ 0x94
 800682c:	486e      	ldr	r0, [pc, #440]	@ (80069e8 <cs43l22_config+0x2a8>)
 800682e:	f7fb fa6d 	bl	8001d0c <HAL_I2C_Mem_Write>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <cs43l22_config+0xfc>
    return false;
 8006838:	2300      	movs	r3, #0
 800683a:	e0d1      	b.n	80069e0 <cs43l22_config+0x2a0>

  /* Power control*/
  byte = (0xEF);
 800683c:	23ef      	movs	r3, #239	@ 0xef
 800683e:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_CTRL2_REG_ADDR, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 8006840:	2364      	movs	r3, #100	@ 0x64
 8006842:	9302      	str	r3, [sp, #8]
 8006844:	2301      	movs	r3, #1
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	1dfb      	adds	r3, r7, #7
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	2301      	movs	r3, #1
 800684e:	2204      	movs	r2, #4
 8006850:	2194      	movs	r1, #148	@ 0x94
 8006852:	4865      	ldr	r0, [pc, #404]	@ (80069e8 <cs43l22_config+0x2a8>)
 8006854:	f7fb fa5a 	bl	8001d0c <HAL_I2C_Mem_Write>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <cs43l22_config+0x122>
    return false;;
 800685e:	2300      	movs	r3, #0
 8006860:	e0be      	b.n	80069e0 <cs43l22_config+0x2a0>

  /* Headphone analog gain control */
  byte = (0x50);
 8006862:	2350      	movs	r3, #80	@ 0x50
 8006864:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_PLAYBACK_CTRL_REG, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 8006866:	2364      	movs	r3, #100	@ 0x64
 8006868:	9302      	str	r3, [sp, #8]
 800686a:	2301      	movs	r3, #1
 800686c:	9301      	str	r3, [sp, #4]
 800686e:	1dfb      	adds	r3, r7, #7
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	2301      	movs	r3, #1
 8006874:	220d      	movs	r2, #13
 8006876:	2194      	movs	r1, #148	@ 0x94
 8006878:	485b      	ldr	r0, [pc, #364]	@ (80069e8 <cs43l22_config+0x2a8>)
 800687a:	f7fb fa47 	bl	8001d0c <HAL_I2C_Mem_Write>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <cs43l22_config+0x148>
    return false;
 8006884:	2300      	movs	r3, #0
 8006886:	e0ab      	b.n	80069e0 <cs43l22_config+0x2a0>

  /*Clock control to auto detection */
  byte = (0x80);
 8006888:	2380      	movs	r3, #128	@ 0x80
 800688a:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_CLOCK_CTRL_REG, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 800688c:	2364      	movs	r3, #100	@ 0x64
 800688e:	9302      	str	r3, [sp, #8]
 8006890:	2301      	movs	r3, #1
 8006892:	9301      	str	r3, [sp, #4]
 8006894:	1dfb      	adds	r3, r7, #7
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	2301      	movs	r3, #1
 800689a:	2205      	movs	r2, #5
 800689c:	2194      	movs	r1, #148	@ 0x94
 800689e:	4852      	ldr	r0, [pc, #328]	@ (80069e8 <cs43l22_config+0x2a8>)
 80068a0:	f7fb fa34 	bl	8001d0c <HAL_I2C_Mem_Write>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <cs43l22_config+0x16e>
    return false;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e098      	b.n	80069e0 <cs43l22_config+0x2a0>

  /*Configure I2S standart*/
  byte = (0x14);
 80068ae:	2314      	movs	r3, #20
 80068b0:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_IF_CTRL1_REG, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 80068b2:	2364      	movs	r3, #100	@ 0x64
 80068b4:	9302      	str	r3, [sp, #8]
 80068b6:	2301      	movs	r3, #1
 80068b8:	9301      	str	r3, [sp, #4]
 80068ba:	1dfb      	adds	r3, r7, #7
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	2301      	movs	r3, #1
 80068c0:	2206      	movs	r2, #6
 80068c2:	2194      	movs	r1, #148	@ 0x94
 80068c4:	4848      	ldr	r0, [pc, #288]	@ (80069e8 <cs43l22_config+0x2a8>)
 80068c6:	f7fb fa21 	bl	8001d0c <HAL_I2C_Mem_Write>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <cs43l22_config+0x194>
    return false;
 80068d0:	2300      	movs	r3, #0
 80068d2:	e085      	b.n	80069e0 <cs43l22_config+0x2a0>

  /*CS43L22_ZC_SR_REG*/
  byte = (0x02);
 80068d4:	2302      	movs	r3, #2
 80068d6:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_ZC_SR_REG, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 80068d8:	2364      	movs	r3, #100	@ 0x64
 80068da:	9302      	str	r3, [sp, #8]
 80068dc:	2301      	movs	r3, #1
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	1dfb      	adds	r3, r7, #7
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	2301      	movs	r3, #1
 80068e6:	220a      	movs	r2, #10
 80068e8:	2194      	movs	r1, #148	@ 0x94
 80068ea:	483f      	ldr	r0, [pc, #252]	@ (80069e8 <cs43l22_config+0x2a8>)
 80068ec:	f7fb fa0e 	bl	8001d0c <HAL_I2C_Mem_Write>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <cs43l22_config+0x1ba>
    return false;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e072      	b.n	80069e0 <cs43l22_config+0x2a0>

  /*CS43L22_REG_MISC_CTL*/
  byte = (0x06);
 80068fa:	2306      	movs	r3, #6
 80068fc:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_MISCEL_CTRL_REG, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 80068fe:	2364      	movs	r3, #100	@ 0x64
 8006900:	9302      	str	r3, [sp, #8]
 8006902:	2301      	movs	r3, #1
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	1dfb      	adds	r3, r7, #7
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	2301      	movs	r3, #1
 800690c:	220e      	movs	r2, #14
 800690e:	2194      	movs	r1, #148	@ 0x94
 8006910:	4835      	ldr	r0, [pc, #212]	@ (80069e8 <cs43l22_config+0x2a8>)
 8006912:	f7fb f9fb 	bl	8001d0c <HAL_I2C_Mem_Write>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <cs43l22_config+0x1e0>
    return false;
 800691c:	2300      	movs	r3, #0
 800691e:	e05f      	b.n	80069e0 <cs43l22_config+0x2a0>

  /*Volume control*/
  byte = (0xC0);
 8006920:	23c0      	movs	r3, #192	@ 0xc0
 8006922:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS,  CS43L22_HP_A_VOLUME_CTRL, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 8006924:	2364      	movs	r3, #100	@ 0x64
 8006926:	9302      	str	r3, [sp, #8]
 8006928:	2301      	movs	r3, #1
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	1dfb      	adds	r3, r7, #7
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2301      	movs	r3, #1
 8006932:	2222      	movs	r2, #34	@ 0x22
 8006934:	2194      	movs	r1, #148	@ 0x94
 8006936:	482c      	ldr	r0, [pc, #176]	@ (80069e8 <cs43l22_config+0x2a8>)
 8006938:	f7fb f9e8 	bl	8001d0c <HAL_I2C_Mem_Write>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <cs43l22_config+0x206>
    return false;
 8006942:	2300      	movs	r3, #0
 8006944:	e04c      	b.n	80069e0 <cs43l22_config+0x2a0>

   /*Volume control*/
   byte = (0xC0);
 8006946:	23c0      	movs	r3, #192	@ 0xc0
 8006948:	71fb      	strb	r3, [r7, #7]
   if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS,  CS43L22_HP_B_VOLUME_CTRL, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 800694a:	2364      	movs	r3, #100	@ 0x64
 800694c:	9302      	str	r3, [sp, #8]
 800694e:	2301      	movs	r3, #1
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	1dfb      	adds	r3, r7, #7
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	2301      	movs	r3, #1
 8006958:	2223      	movs	r2, #35	@ 0x23
 800695a:	2194      	movs	r1, #148	@ 0x94
 800695c:	4822      	ldr	r0, [pc, #136]	@ (80069e8 <cs43l22_config+0x2a8>)
 800695e:	f7fb f9d5 	bl	8001d0c <HAL_I2C_Mem_Write>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <cs43l22_config+0x22c>
     return false;
 8006968:	2300      	movs	r3, #0
 800696a:	e039      	b.n	80069e0 <cs43l22_config+0x2a0>

  /*Passthrough A volume */
  byte = (0x4F);
 800696c:	234f      	movs	r3, #79	@ 0x4f
 800696e:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS,  CS43L22_PASSTHROUGH_A_REG, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 8006970:	2364      	movs	r3, #100	@ 0x64
 8006972:	9302      	str	r3, [sp, #8]
 8006974:	2301      	movs	r3, #1
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	1dfb      	adds	r3, r7, #7
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	2301      	movs	r3, #1
 800697e:	2214      	movs	r2, #20
 8006980:	2194      	movs	r1, #148	@ 0x94
 8006982:	4819      	ldr	r0, [pc, #100]	@ (80069e8 <cs43l22_config+0x2a8>)
 8006984:	f7fb f9c2 	bl	8001d0c <HAL_I2C_Mem_Write>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <cs43l22_config+0x252>
    return false;
 800698e:	2300      	movs	r3, #0
 8006990:	e026      	b.n	80069e0 <cs43l22_config+0x2a0>
//   byte = (0x4F);
//   if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS,  CS43L22_PASSTHROUGH_B_REG, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
//     return false;

  /*Master volume A control*/
  byte = (0x18);
 8006992:	2318      	movs	r3, #24
 8006994:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS,  CS43L22_MASTER_VOLUME_A_CTRL, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
 8006996:	2364      	movs	r3, #100	@ 0x64
 8006998:	9302      	str	r3, [sp, #8]
 800699a:	2301      	movs	r3, #1
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	1dfb      	adds	r3, r7, #7
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	2301      	movs	r3, #1
 80069a4:	2220      	movs	r2, #32
 80069a6:	2194      	movs	r1, #148	@ 0x94
 80069a8:	480f      	ldr	r0, [pc, #60]	@ (80069e8 <cs43l22_config+0x2a8>)
 80069aa:	f7fb f9af 	bl	8001d0c <HAL_I2C_Mem_Write>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <cs43l22_config+0x278>
    return false;
 80069b4:	2300      	movs	r3, #0
 80069b6:	e013      	b.n	80069e0 <cs43l22_config+0x2a0>
//   byte = (24);
//   if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS,  CS43L22_MASTER_VOLUME_B_CTRL, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK)
//     return false;

  /*Power up*/
  byte = 0x9E;
 80069b8:	239e      	movs	r3, #158	@ 0x9e
 80069ba:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Mem_Write(&hi2c1, CS43L22_BASE_ADDRESS, CS43L22_CTRL1_REG_ADDR, CS43L22_REG_SIZE, &byte, 1, I2C_TIMEOUT_DURATION_MS) != HAL_OK){
 80069bc:	2364      	movs	r3, #100	@ 0x64
 80069be:	9302      	str	r3, [sp, #8]
 80069c0:	2301      	movs	r3, #1
 80069c2:	9301      	str	r3, [sp, #4]
 80069c4:	1dfb      	adds	r3, r7, #7
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	2301      	movs	r3, #1
 80069ca:	2202      	movs	r2, #2
 80069cc:	2194      	movs	r1, #148	@ 0x94
 80069ce:	4806      	ldr	r0, [pc, #24]	@ (80069e8 <cs43l22_config+0x2a8>)
 80069d0:	f7fb f99c 	bl	8001d0c <HAL_I2C_Mem_Write>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <cs43l22_config+0x29e>
	  return false;
 80069da:	2300      	movs	r3, #0
 80069dc:	e000      	b.n	80069e0 <cs43l22_config+0x2a0>
  }

  return true;
 80069de:	2301      	movs	r3, #1
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	20000038 	.word	0x20000038

080069ec <init_microphone_task_notification>:

#define MICROPHONE_TASK_QUEUE_LEN          (16)

QueueHandle_t microphone_queue;

bool init_microphone_task_notification(void){
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
    microphone_queue = xQueueCreate(MICROPHONE_TASK_QUEUE_LEN, sizeof(NotificationMicrophoneTask_t));
 80069f0:	2200      	movs	r2, #0
 80069f2:	2108      	movs	r1, #8
 80069f4:	2010      	movs	r0, #16
 80069f6:	f7fd fbd8 	bl	80041aa <xQueueGenericCreate>
 80069fa:	4603      	mov	r3, r0
 80069fc:	4a05      	ldr	r2, [pc, #20]	@ (8006a14 <init_microphone_task_notification+0x28>)
 80069fe:	6013      	str	r3, [r2, #0]
    if(microphone_queue == NULL){
 8006a00:	4b04      	ldr	r3, [pc, #16]	@ (8006a14 <init_microphone_task_notification+0x28>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <init_microphone_task_notification+0x20>
        return false;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e000      	b.n	8006a0e <init_microphone_task_notification+0x22>
    }
    return true;
 8006a0c:	2301      	movs	r3, #1
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20004b30 	.word	0x20004b30

08006a18 <microphone_task>:

const static NotificationHandlerMicrophoneTask ntf_handler[NUM_OF_MICROPHONE_TASK_FUNCTION];

volatile bool is_data_ready_to_send = false;

void microphone_task(void *argument){
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]

	if(!receive_raw_data(mic_buffer, MIC_BUFFER_SIZE)){
 8006a20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006a24:	4813      	ldr	r0, [pc, #76]	@ (8006a74 <microphone_task+0x5c>)
 8006a26:	f000 f829 	bl	8006a7c <receive_raw_data>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f083 0301 	eor.w	r3, r3, #1
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <microphone_task+0x24>
		microphone_error_handler(NULL);
 8006a36:	2000      	movs	r0, #0
 8006a38:	f000 f83a 	bl	8006ab0 <microphone_error_handler>
	}

  for(;;)
  {
	  if(is_data_ready_to_send){
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006a78 <microphone_task+0x60>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0fa      	beq.n	8006a3c <microphone_task+0x24>
     NotificationSignalProcessing_t ntf = {.id = NTF_COMPUTE_FIR_FILTER, .data = mic_buffer};
 8006a46:	2300      	movs	r3, #0
 8006a48:	723b      	strb	r3, [r7, #8]
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a74 <microphone_task+0x5c>)
 8006a4c:	60fb      	str	r3, [r7, #12]
		  if(!signal_processing_task_notify(&ntf)){
 8006a4e:	f107 0308 	add.w	r3, r7, #8
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 f866 	bl	8006b24 <signal_processing_task_notify>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f083 0301 	eor.w	r3, r3, #1
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <microphone_task+0x52>
		    microphone_error_handler(NULL);
 8006a64:	2000      	movs	r0, #0
 8006a66:	f000 f823 	bl	8006ab0 <microphone_error_handler>
		  }
     is_data_ready_to_send = false;
 8006a6a:	4b03      	ldr	r3, [pc, #12]	@ (8006a78 <microphone_task+0x60>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	701a      	strb	r2, [r3, #0]
	  if(is_data_ready_to_send){
 8006a70:	e7e4      	b.n	8006a3c <microphone_task+0x24>
 8006a72:	bf00      	nop
 8006a74:	20004b34 	.word	0x20004b34
 8006a78:	20004f34 	.word	0x20004f34

08006a7c <receive_raw_data>:

static inline void task_led_toggle(GPIO_TypeDef* gpio, uint16_t pin){
  HAL_GPIO_TogglePin(gpio, pin);
}

static bool receive_raw_data(uint32_t* data, uint16_t size){
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	807b      	strh	r3, [r7, #2]
  if(HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*)data, size / 2) != HAL_OK){
 8006a88:	887b      	ldrh	r3, [r7, #2]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	4806      	ldr	r0, [pc, #24]	@ (8006aac <receive_raw_data+0x30>)
 8006a94:	f7fb fe88 	bl	80027a8 <HAL_I2S_Receive_DMA>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <receive_raw_data+0x26>
    return false;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e000      	b.n	8006aa4 <receive_raw_data+0x28>
  }

  return true;
 8006aa2:	2301      	movs	r3, #1
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	2000008c 	.word	0x2000008c

08006ab0 <microphone_error_handler>:

static inline void microphone_error_handler(void* arg){
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  (void)arg;
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_I2S_RxHalfCpltCallback>:
//TODO: Complete the half complete interrupt
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	;;
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_I2S_RxCpltCallback>:

//TODO: Complete the full complete interrupt
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	is_data_ready_to_send = true;
 8006ae0:	4b04      	ldr	r3, [pc, #16]	@ (8006af4 <HAL_I2S_RxCpltCallback+0x1c>)
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]

}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20004f34 	.word	0x20004f34

08006af8 <init_signal_processing_task_notification>:

#define SIGNAL_PROCESSING_TASK_QUEUE_LEN          (128)

QueueHandle_t signal_processing_queue;

bool init_signal_processing_task_notification(void){
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
    signal_processing_queue = xQueueCreate(SIGNAL_PROCESSING_TASK_QUEUE_LEN, sizeof(NotificationSignalProcessing_t));
 8006afc:	2200      	movs	r2, #0
 8006afe:	2108      	movs	r1, #8
 8006b00:	2080      	movs	r0, #128	@ 0x80
 8006b02:	f7fd fb52 	bl	80041aa <xQueueGenericCreate>
 8006b06:	4603      	mov	r3, r0
 8006b08:	4a05      	ldr	r2, [pc, #20]	@ (8006b20 <init_signal_processing_task_notification+0x28>)
 8006b0a:	6013      	str	r3, [r2, #0]
    if(signal_processing_queue == NULL){
 8006b0c:	4b04      	ldr	r3, [pc, #16]	@ (8006b20 <init_signal_processing_task_notification+0x28>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <init_signal_processing_task_notification+0x20>
        return false;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e000      	b.n	8006b1a <init_signal_processing_task_notification+0x22>
    }
    return true;
 8006b18:	2301      	movs	r3, #1
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20004f38 	.word	0x20004f38

08006b24 <signal_processing_task_notify>:

bool signal_processing_task_notify(NotificationSignalProcessing_t* ntf){
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
    if(ntf == NULL || signal_processing_queue == NULL){
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <signal_processing_task_notify+0x16>
 8006b32:	4b0b      	ldr	r3, [pc, #44]	@ (8006b60 <signal_processing_task_notify+0x3c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <signal_processing_task_notify+0x1a>
        return false;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e00c      	b.n	8006b58 <signal_processing_task_notify+0x34>
    }

    if(xQueueSend(signal_processing_queue, (void*)ntf, 0) == pdPASS){
 8006b3e:	4b08      	ldr	r3, [pc, #32]	@ (8006b60 <signal_processing_task_notify+0x3c>)
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	2300      	movs	r3, #0
 8006b44:	2200      	movs	r2, #0
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	f7fd fb8e 	bl	8004268 <xQueueGenericSend>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <signal_processing_task_notify+0x32>
        return true;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <signal_processing_task_notify+0x34>
    }

    return false;
 8006b56:	2300      	movs	r3, #0

}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20004f38 	.word	0x20004f38

08006b64 <wait_signal_processing_task_notification>:

bool wait_signal_processing_task_notification(NotificationSignalProcessing_t* ntf){
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
    
    if(ntf == NULL || signal_processing_queue == NULL){
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <wait_signal_processing_task_notification+0x16>
 8006b72:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb0 <wait_signal_processing_task_notification+0x4c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <wait_signal_processing_task_notification+0x1a>
        return false;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	e013      	b.n	8006ba6 <wait_signal_processing_task_notification+0x42>
    }

    if(xQueueReceive(signal_processing_queue, (void*)ntf, portMAX_DELAY) == pdPASS){
 8006b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006bb0 <wait_signal_processing_task_notification+0x4c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f04f 32ff 	mov.w	r2, #4294967295
 8006b86:	6879      	ldr	r1, [r7, #4]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fd fd0d 	bl	80045a8 <xQueueReceive>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d107      	bne.n	8006ba4 <wait_signal_processing_task_notification+0x40>
        if(IS_VALID_SIGNAL_TASK_NOTIFICATION(ntf->id)){
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <wait_signal_processing_task_notification+0x3c>
            return true;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e002      	b.n	8006ba6 <wait_signal_processing_task_notification+0x42>
        }
        else{
            return false;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	e000      	b.n	8006ba6 <wait_signal_processing_task_notification+0x42>
        }
    }
    
    return true;
 8006ba4:	2301      	movs	r3, #1
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20004f38 	.word	0x20004f38

08006bb4 <signal_processing_task>:

const static NotificationHandlerSignalProcessing ntf_handler[NUM_OF_SIGNAL_PROCESSING_TASK_FUNCTION] = {
  [NTF_COMPUTE_FIR_FILTER] = task_compute_FIR,
};

void signal_processing_task(void *argument){
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  init_FIR_filter();
 8006bbc:	f000 f810 	bl	8006be0 <init_FIR_filter>

  for(;;)
  {
    NotificationSignalProcessing_t ntf;
    if(wait_signal_processing_task_notification(&ntf)){
 8006bc0:	f107 0308 	add.w	r3, r7, #8
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff ffcd 	bl	8006b64 <wait_signal_processing_task_notification>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0f7      	beq.n	8006bc0 <signal_processing_task+0xc>
      ntf_handler[ntf.id](&ntf);
 8006bd0:	4a02      	ldr	r2, [pc, #8]	@ (8006bdc <signal_processing_task+0x28>)
 8006bd2:	f107 0308 	add.w	r3, r7, #8
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	4790      	blx	r2
  {
 8006bda:	e7f1      	b.n	8006bc0 <signal_processing_task+0xc>
 8006bdc:	08006c0d 	.word	0x08006c0d

08006be0 <init_FIR_filter>:

static inline void task_led_toggle(GPIO_TypeDef* gpio, uint16_t pin){
    HAL_GPIO_TogglePin(gpio, pin);
}

static inline void init_FIR_filter(){
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af02      	add	r7, sp, #8
	arm_fir_init_f32(&fir_filter, FIR_FILTER_NUM_TAPS, filter_coeff, filter_state, BLOCK_SIZE);
 8006be6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	4b04      	ldr	r3, [pc, #16]	@ (8006c00 <init_FIR_filter+0x20>)
 8006bee:	4a05      	ldr	r2, [pc, #20]	@ (8006c04 <init_FIR_filter+0x24>)
 8006bf0:	211f      	movs	r1, #31
 8006bf2:	4805      	ldr	r0, [pc, #20]	@ (8006c08 <init_FIR_filter+0x28>)
 8006bf4:	f000 f932 	bl	8006e5c <arm_fir_init_f32>
}
 8006bf8:	bf00      	nop
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20004f48 	.word	0x20004f48
 8006c04:	080074e4 	.word	0x080074e4
 8006c08:	20004f3c 	.word	0x20004f3c

08006c0c <task_compute_FIR>:

static bool task_compute_FIR(NotificationSignalProcessing_t* ntf){
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8006c18:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8006c1c:	6018      	str	r0, [r3, #0]
  if(ntf == NULL){
 8006c1e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8006c22:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <task_compute_FIR+0x24>
    return false;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e064      	b.n	8006cfa <task_compute_FIR+0xee>
  }  

  uint32_t* uint32_data = (uint32_t*)ntf->data;
 8006c30:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8006c34:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
  uint32_t tx_data[BLOCK_SIZE];

  for(size_t i = 0; i < BLOCK_SIZE; ++i){
 8006c40:	2300      	movs	r3, #0
 8006c42:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8006c46:	e017      	b.n	8006c78 <task_compute_FIR+0x6c>
	  fir_filter_input[i] = (float32_t)(int32_t)((uint32_data[i] >> 8));
 8006c48:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8006c52:	4413      	add	r3, r2
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	0a1b      	lsrs	r3, r3, #8
 8006c58:	ee07 3a90 	vmov	s15, r3
 8006c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c60:	4a28      	ldr	r2, [pc, #160]	@ (8006d04 <task_compute_FIR+0xf8>)
 8006c62:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	edc3 7a00 	vstr	s15, [r3]
  for(size_t i = 0; i < BLOCK_SIZE; ++i){
 8006c6e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8006c72:	3301      	adds	r3, #1
 8006c74:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8006c78:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8006c7c:	2bff      	cmp	r3, #255	@ 0xff
 8006c7e:	d9e3      	bls.n	8006c48 <task_compute_FIR+0x3c>
  }

  arm_fir_f32(&fir_filter, fir_filter_input, fir_filter_output, BLOCK_SIZE);
 8006c80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c84:	4a20      	ldr	r2, [pc, #128]	@ (8006d08 <task_compute_FIR+0xfc>)
 8006c86:	491f      	ldr	r1, [pc, #124]	@ (8006d04 <task_compute_FIR+0xf8>)
 8006c88:	4820      	ldr	r0, [pc, #128]	@ (8006d0c <task_compute_FIR+0x100>)
 8006c8a:	f000 f8f5 	bl	8006e78 <arm_fir_f32>

  for(size_t i = 0; i < BLOCK_SIZE; ++i){
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
 8006c94:	e019      	b.n	8006cca <task_compute_FIR+0xbe>
	  tx_data[i] = (uint32_t)((int32_t)(fir_filter_output[i] ) << 8);
 8006c96:	4a1c      	ldr	r2, [pc, #112]	@ (8006d08 <task_compute_FIR+0xfc>)
 8006c98:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	edd3 7a00 	vldr	s15, [r3]
 8006ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ca8:	ee17 3a90 	vmov	r3, s15
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	4619      	mov	r1, r3
 8006cb0:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8006cb4:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8006cb8:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 8006cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(size_t i = 0; i < BLOCK_SIZE; ++i){
 8006cc0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	f8c7 3418 	str.w	r3, [r7, #1048]	@ 0x418
 8006cca:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8006cce:	2bff      	cmp	r3, #255	@ 0xff
 8006cd0:	d9e1      	bls.n	8006c96 <task_compute_FIR+0x8a>
  }

  NotificationSpeakerTask_t s_ntf = {.id = NTF_SEND_SPEAKER_DATA, .data = tx_data};
 8006cd2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8006cd6:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8006ce2:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8006ce6:	f107 0214 	add.w	r2, r7, #20
 8006cea:	605a      	str	r2, [r3, #4]
  
  return (speaker_task_notify(&s_ntf) == true);
 8006cec:	f107 030c 	add.w	r3, r7, #12
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 f823 	bl	8006d3c <speaker_task_notify>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	bf00      	nop
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	200053c8 	.word	0x200053c8
 8006d08:	200057c8 	.word	0x200057c8
 8006d0c:	20004f3c 	.word	0x20004f3c

08006d10 <init_speaker_task_notification>:

#define SPEAKER_TASK_QUEUE_LEN          (16)

QueueHandle_t speaker_queue;

bool init_speaker_task_notification(void){
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
    speaker_queue = xQueueCreate(SPEAKER_TASK_QUEUE_LEN, sizeof(NotificationSpeakerTask_t));
 8006d14:	2200      	movs	r2, #0
 8006d16:	2108      	movs	r1, #8
 8006d18:	2010      	movs	r0, #16
 8006d1a:	f7fd fa46 	bl	80041aa <xQueueGenericCreate>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4a05      	ldr	r2, [pc, #20]	@ (8006d38 <init_speaker_task_notification+0x28>)
 8006d22:	6013      	str	r3, [r2, #0]
    if(speaker_queue == NULL){
 8006d24:	4b04      	ldr	r3, [pc, #16]	@ (8006d38 <init_speaker_task_notification+0x28>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <init_speaker_task_notification+0x20>
        return false;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	e000      	b.n	8006d32 <init_speaker_task_notification+0x22>
    }
    return true;
 8006d30:	2301      	movs	r3, #1
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20005bc8 	.word	0x20005bc8

08006d3c <speaker_task_notify>:

bool speaker_task_notify(NotificationSpeakerTask_t* ntf){
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
    if(ntf == NULL || speaker_queue == NULL){
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <speaker_task_notify+0x16>
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d78 <speaker_task_notify+0x3c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <speaker_task_notify+0x1a>
        return false;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e00c      	b.n	8006d70 <speaker_task_notify+0x34>
    }

    if(xQueueSend(speaker_queue, (void*)ntf, 0) == pdPASS){
 8006d56:	4b08      	ldr	r3, [pc, #32]	@ (8006d78 <speaker_task_notify+0x3c>)
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	f7fd fa82 	bl	8004268 <xQueueGenericSend>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <speaker_task_notify+0x32>
        return true;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <speaker_task_notify+0x34>
    }

    return false;
 8006d6e:	2300      	movs	r3, #0

}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20005bc8 	.word	0x20005bc8

08006d7c <wait_speaker_task_notification>:

bool wait_speaker_task_notification(NotificationSpeakerTask_t* ntf){
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
    
    if(ntf == NULL || speaker_queue == NULL){
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <wait_speaker_task_notification+0x16>
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc8 <wait_speaker_task_notification+0x4c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <wait_speaker_task_notification+0x1a>
        return false;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e013      	b.n	8006dbe <wait_speaker_task_notification+0x42>
    }

    if(xQueueReceive(speaker_queue, (void*)ntf, portMAX_DELAY) == pdPASS){
 8006d96:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc8 <wait_speaker_task_notification+0x4c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fd fc01 	bl	80045a8 <xQueueReceive>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d107      	bne.n	8006dbc <wait_speaker_task_notification+0x40>
        if(IS_VALID_SPEAKER_TASK_NOTIFICATION(ntf->id)){
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <wait_speaker_task_notification+0x3c>
            return true;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e002      	b.n	8006dbe <wait_speaker_task_notification+0x42>
        }
        else{
            return false;
 8006db8:	2300      	movs	r3, #0
 8006dba:	e000      	b.n	8006dbe <wait_speaker_task_notification+0x42>
        }
    }
    
    return true;
 8006dbc:	2301      	movs	r3, #1
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20005bc8 	.word	0x20005bc8

08006dcc <speaker_task>:

const static NotificationSpeakerTaskHandler ntf_handler[NUM_OF_SPEAKER_TASK_FUNCTION] = {
    [NTF_SEND_SPEAKER_DATA] = play_audio,
};

void speaker_task(void* argument){
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
    if(!cs43l22_config()){
 8006dd4:	f7ff fcb4 	bl	8006740 <cs43l22_config>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f083 0301 	eor.w	r3, r3, #1
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <speaker_task+0x1e>
      speaker_error_handler(NULL); 
 8006de4:	2000      	movs	r0, #0
 8006de6:	f000 f82d 	bl	8006e44 <speaker_error_handler>
    }

    for(;;){
        NotificationSpeakerTask_t ntf;
        if(wait_speaker_task_notification(&ntf)){
 8006dea:	f107 0308 	add.w	r3, r7, #8
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff ffc4 	bl	8006d7c <wait_speaker_task_notification>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0f7      	beq.n	8006dea <speaker_task+0x1e>
            ntf_handler[ntf.id](&ntf);
 8006dfa:	4a03      	ldr	r2, [pc, #12]	@ (8006e08 <speaker_task+0x3c>)
 8006dfc:	f107 0308 	add.w	r3, r7, #8
 8006e00:	4618      	mov	r0, r3
 8006e02:	4790      	blx	r2
    for(;;){
 8006e04:	e7f1      	b.n	8006dea <speaker_task+0x1e>
 8006e06:	bf00      	nop
 8006e08:	08006e0d 	.word	0x08006e0d

08006e0c <play_audio>:

static inline void led_toggle_speaker_task(GPIO_TypeDef* gpio, uint16_t pin){
    HAL_GPIO_TogglePin(gpio, pin);
}

static bool play_audio(NotificationSpeakerTask_t* ntf){
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
    if(ntf == NULL){
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <play_audio+0x12>
        return false;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e00c      	b.n	8006e38 <play_audio+0x2c>
    }

    if(HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)ntf->data, SPEAKER_BUFFER_SIZE / 2) == HAL_OK){
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2280      	movs	r2, #128	@ 0x80
 8006e24:	4619      	mov	r1, r3
 8006e26:	4806      	ldr	r0, [pc, #24]	@ (8006e40 <play_audio+0x34>)
 8006e28:	f7fb fc1a 	bl	8002660 <HAL_I2S_Transmit_DMA>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <play_audio+0x2a>
        return true;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e000      	b.n	8006e38 <play_audio+0x2c>
    }
    return false;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	200000d4 	.word	0x200000d4

08006e44 <speaker_error_handler>:

static inline bool speaker_error_handler(void* arg){
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
    (void)arg;
    return false;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
	...

08006e5c <arm_fir_init_f32>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	9d04      	ldr	r5, [sp, #16]
 8006e60:	8001      	strh	r1, [r0, #0]
 8006e62:	3d01      	subs	r5, #1
 8006e64:	440d      	add	r5, r1
 8006e66:	6082      	str	r2, [r0, #8]
 8006e68:	4604      	mov	r4, r0
 8006e6a:	00aa      	lsls	r2, r5, #2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	2100      	movs	r1, #0
 8006e70:	f000 fa8a 	bl	8007388 <memset>
 8006e74:	6060      	str	r0, [r4, #4]
 8006e76:	bd38      	pop	{r3, r4, r5, pc}

08006e78 <arm_fir_f32>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	ed2d 8b10 	vpush	{d8-d15}
 8006e80:	b08b      	sub	sp, #44	@ 0x2c
 8006e82:	f8b0 c000 	ldrh.w	ip, [r0]
 8006e86:	9003      	str	r0, [sp, #12]
 8006e88:	e9d0 9401 	ldrd	r9, r4, [r0, #4]
 8006e8c:	f10c 4080 	add.w	r0, ip, #1073741824	@ 0x40000000
 8006e90:	3801      	subs	r0, #1
 8006e92:	9304      	str	r3, [sp, #16]
 8006e94:	eb09 0580 	add.w	r5, r9, r0, lsl #2
 8006e98:	08db      	lsrs	r3, r3, #3
 8006e9a:	9402      	str	r4, [sp, #8]
 8006e9c:	9500      	str	r5, [sp, #0]
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	f000 81f6 	beq.w	8007290 <arm_fir_f32+0x418>
 8006ea4:	469e      	mov	lr, r3
 8006ea6:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 8006eaa:	4620      	mov	r0, r4
 8006eac:	015e      	lsls	r6, r3, #5
 8006eae:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 8006eb2:	3020      	adds	r0, #32
 8006eb4:	9605      	str	r6, [sp, #20]
 8006eb6:	9406      	str	r4, [sp, #24]
 8006eb8:	f00c 0a07 	and.w	sl, ip, #7
 8006ebc:	9007      	str	r0, [sp, #28]
 8006ebe:	f109 0b1c 	add.w	fp, r9, #28
 8006ec2:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8006ec6:	e9dd 8905 	ldrd	r8, r9, [sp, #20]
 8006eca:	e9cd 1205 	strd	r1, r2, [sp, #20]
 8006ece:	eb00 1743 	add.w	r7, r0, r3, lsl #5
 8006ed2:	4650      	mov	r0, sl
 8006ed4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ed8:	f8cd c020 	str.w	ip, [sp, #32]
 8006edc:	f101 0620 	add.w	r6, r1, #32
 8006ee0:	3520      	adds	r5, #32
 8006ee2:	f102 0420 	add.w	r4, r2, #32
 8006ee6:	469c      	mov	ip, r3
 8006ee8:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8006eec:	f845 3c20 	str.w	r3, [r5, #-32]
 8006ef0:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8006ef4:	f845 3c1c 	str.w	r3, [r5, #-28]
 8006ef8:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8006efc:	f845 3c18 	str.w	r3, [r5, #-24]
 8006f00:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8006f04:	f845 3c14 	str.w	r3, [r5, #-20]
 8006f08:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8006f0c:	f845 3c10 	str.w	r3, [r5, #-16]
 8006f10:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8006f14:	f845 3c0c 	str.w	r3, [r5, #-12]
 8006f18:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8006f1c:	f845 3c08 	str.w	r3, [r5, #-8]
 8006f20:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006f24:	f845 3c04 	str.w	r3, [r5, #-4]
 8006f28:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 8006f2c:	ed1b 1a06 	vldr	s2, [fp, #-24]	@ 0xffffffe8
 8006f30:	ed5b 0a05 	vldr	s1, [fp, #-20]	@ 0xffffffec
 8006f34:	ed1b 0a04 	vldr	s0, [fp, #-16]
 8006f38:	ed1b 8a03 	vldr	s16, [fp, #-12]
 8006f3c:	ed5b 1a02 	vldr	s3, [fp, #-8]
 8006f40:	ed5b 8a01 	vldr	s17, [fp, #-4]
 8006f44:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 80071d0 <arm_fir_f32+0x358>
 8006f48:	465a      	mov	r2, fp
 8006f4a:	f1bc 0f00 	cmp.w	ip, #0
 8006f4e:	f000 8207 	beq.w	8007360 <arm_fir_f32+0x4e8>
 8006f52:	f10b 0120 	add.w	r1, fp, #32
 8006f56:	eef0 ba66 	vmov.f32	s23, s13
 8006f5a:	eeb0 6a66 	vmov.f32	s12, s13
 8006f5e:	eeb0 9a66 	vmov.f32	s18, s13
 8006f62:	eef0 9a66 	vmov.f32	s19, s13
 8006f66:	eeb0 aa66 	vmov.f32	s20, s13
 8006f6a:	eef0 aa66 	vmov.f32	s21, s13
 8006f6e:	eeb0 ba66 	vmov.f32	s22, s13
 8006f72:	460a      	mov	r2, r1
 8006f74:	4653      	mov	r3, sl
 8006f76:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 8006f7a:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 8006f7e:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 8006f82:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 8006f86:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 8006f8a:	ed53 ca04 	vldr	s25, [r3, #-16]
 8006f8e:	ed53 2a03 	vldr	s5, [r3, #-12]
 8006f92:	ed13 4a02 	vldr	s8, [r3, #-8]
 8006f96:	ed13 5a01 	vldr	s10, [r3, #-4]
 8006f9a:	ee67 fa02 	vmul.f32	s31, s14, s4
 8006f9e:	ee27 da01 	vmul.f32	s26, s14, s2
 8006fa2:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 8006fa6:	ee27 ca20 	vmul.f32	s24, s14, s1
 8006faa:	ee27 3a00 	vmul.f32	s6, s14, s0
 8006fae:	ee67 3a08 	vmul.f32	s7, s14, s16
 8006fb2:	ee67 5a21 	vmul.f32	s11, s14, s3
 8006fb6:	ee27 fa28 	vmul.f32	s30, s14, s17
 8006fba:	ee67 7a24 	vmul.f32	s15, s14, s9
 8006fbe:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8006fc2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8006fc6:	ee6e fa81 	vmul.f32	s31, s29, s2
 8006fca:	ee2e daa0 	vmul.f32	s26, s29, s1
 8006fce:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8006fd2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8006fd6:	ee73 9a29 	vadd.f32	s19, s6, s19
 8006fda:	ee2e ca80 	vmul.f32	s24, s29, s0
 8006fde:	ee2e 3a88 	vmul.f32	s6, s29, s16
 8006fe2:	ee33 9a89 	vadd.f32	s18, s7, s18
 8006fe6:	ee35 6a86 	vadd.f32	s12, s11, s12
 8006fea:	ee6e 3aa1 	vmul.f32	s7, s29, s3
 8006fee:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 8006ff2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8006ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ffa:	ee24 faae 	vmul.f32	s30, s9, s29
 8006ffe:	ee6e ea82 	vmul.f32	s29, s29, s4
 8007002:	ee2e 7a20 	vmul.f32	s14, s28, s1
 8007006:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800700a:	ed52 0a05 	vldr	s1, [r2, #-20]	@ 0xffffffec
 800700e:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8007012:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007016:	ee2e da00 	vmul.f32	s26, s28, s0
 800701a:	ee2e ca08 	vmul.f32	s24, s28, s16
 800701e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007022:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007026:	ee2e 3a21 	vmul.f32	s6, s28, s3
 800702a:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800702e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007032:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007036:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800703a:	ee22 fa0e 	vmul.f32	s30, s4, s28
 800703e:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8007042:	ee2e ea01 	vmul.f32	s28, s28, s2
 8007046:	ee6d 6a80 	vmul.f32	s13, s27, s0
 800704a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800704e:	ed12 0a04 	vldr	s0, [r2, #-16]
 8007052:	ee2d da88 	vmul.f32	s26, s27, s16
 8007056:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800705a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800705e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007062:	ee2d caa1 	vmul.f32	s24, s27, s3
 8007066:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800706a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800706e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007072:	ee64 3aad 	vmul.f32	s7, s9, s27
 8007076:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800707a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800707e:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8007082:	ee21 fa2d 	vmul.f32	s30, s2, s27
 8007086:	ee6d daa0 	vmul.f32	s27, s27, s1
 800708a:	ee6c fa88 	vmul.f32	s31, s25, s16
 800708e:	ee36 ba8b 	vadd.f32	s22, s13, s22
 8007092:	ed12 8a03 	vldr	s16, [r2, #-12]
 8007096:	ee3d da2a 	vadd.f32	s26, s26, s21
 800709a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800709e:	ee6c aaa1 	vmul.f32	s21, s25, s3
 80070a2:	ee2c caa8 	vmul.f32	s24, s25, s17
 80070a6:	ee73 9a29 	vadd.f32	s19, s6, s19
 80070aa:	ee33 9a89 	vadd.f32	s18, s7, s18
 80070ae:	ee24 3aac 	vmul.f32	s6, s9, s25
 80070b2:	ee62 3a2c 	vmul.f32	s7, s4, s25
 80070b6:	ee35 6a86 	vadd.f32	s12, s11, s12
 80070ba:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80070be:	ee61 5a2c 	vmul.f32	s11, s2, s25
 80070c2:	ee20 faac 	vmul.f32	s30, s1, s25
 80070c6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 80070ca:	ee6c ca80 	vmul.f32	s25, s25, s0
 80070ce:	ee62 eaa1 	vmul.f32	s29, s5, s3
 80070d2:	ee3a da8d 	vadd.f32	s26, s21, s26
 80070d6:	ed52 1a02 	vldr	s3, [r2, #-8]
 80070da:	ee62 aaa8 	vmul.f32	s21, s5, s17
 80070de:	ee3f ba8b 	vadd.f32	s22, s31, s22
 80070e2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80070e6:	ee73 9a29 	vadd.f32	s19, s6, s19
 80070ea:	ee24 caa2 	vmul.f32	s24, s9, s5
 80070ee:	ee22 3a22 	vmul.f32	s6, s4, s5
 80070f2:	ee33 9a89 	vadd.f32	s18, s7, s18
 80070f6:	ee35 6a86 	vadd.f32	s12, s11, s12
 80070fa:	ee61 3a22 	vmul.f32	s7, s2, s5
 80070fe:	ee60 5aa2 	vmul.f32	s11, s1, s5
 8007102:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007106:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800710a:	ee20 fa22 	vmul.f32	s30, s0, s5
 800710e:	ee62 2a88 	vmul.f32	s5, s5, s16
 8007112:	ee7e fa8b 	vadd.f32	s31, s29, s22
 8007116:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800711a:	ee24 ba28 	vmul.f32	s22, s8, s17
 800711e:	ee7a aa8d 	vadd.f32	s21, s21, s26
 8007122:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8007126:	ee24 da84 	vmul.f32	s26, s9, s8
 800712a:	ee22 ca04 	vmul.f32	s24, s4, s8
 800712e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8007132:	ee33 9a89 	vadd.f32	s18, s7, s18
 8007136:	ee21 3a04 	vmul.f32	s6, s2, s8
 800713a:	ee60 3a84 	vmul.f32	s7, s1, s8
 800713e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007142:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8007146:	ee60 5a04 	vmul.f32	s11, s0, s8
 800714a:	ee28 7a04 	vmul.f32	s14, s16, s8
 800714e:	ee64 6a21 	vmul.f32	s13, s8, s3
 8007152:	ed52 8a01 	vldr	s17, [r2, #-4]
 8007156:	ee73 9a29 	vadd.f32	s19, s6, s19
 800715a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800715e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007162:	ee37 7a2b 	vadd.f32	s14, s14, s23
 8007166:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800716a:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800716e:	ee64 4a85 	vmul.f32	s9, s9, s10
 8007172:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8007176:	ee22 4a05 	vmul.f32	s8, s4, s10
 800717a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800717e:	ee61 2a05 	vmul.f32	s5, s2, s10
 8007182:	ee20 3a85 	vmul.f32	s6, s1, s10
 8007186:	ee60 3a05 	vmul.f32	s7, s0, s10
 800718a:	ee68 5a05 	vmul.f32	s11, s16, s10
 800718e:	ee61 ba85 	vmul.f32	s23, s3, s10
 8007192:	ee65 7a28 	vmul.f32	s15, s10, s17
 8007196:	3320      	adds	r3, #32
 8007198:	429f      	cmp	r7, r3
 800719a:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800719e:	ee74 aa2a 	vadd.f32	s21, s8, s21
 80071a2:	ee32 aa8a 	vadd.f32	s20, s5, s20
 80071a6:	ee73 9a29 	vadd.f32	s19, s6, s19
 80071aa:	ee33 9a89 	vadd.f32	s18, s7, s18
 80071ae:	ee35 6a86 	vadd.f32	s12, s11, s12
 80071b2:	ee7b ba87 	vadd.f32	s23, s23, s14
 80071b6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80071ba:	f102 0220 	add.w	r2, r2, #32
 80071be:	f47f aeda 	bne.w	8006f76 <arm_fir_f32+0xfe>
 80071c2:	eb0b 0208 	add.w	r2, fp, r8
 80071c6:	46cb      	mov	fp, r9
 80071c8:	b3c0      	cbz	r0, 800723c <arm_fir_f32+0x3c4>
 80071ca:	4603      	mov	r3, r0
 80071cc:	e004      	b.n	80071d8 <arm_fir_f32+0x360>
 80071ce:	bf00      	nop
 80071d0:	00000000 	.word	0x00000000
 80071d4:	eef0 8a65 	vmov.f32	s17, s11
 80071d8:	ecfb 7a01 	vldmia	fp!, {s15}
 80071dc:	ecf2 5a01 	vldmia	r2!, {s11}
 80071e0:	ee27 2a82 	vmul.f32	s4, s15, s4
 80071e4:	ee67 2a81 	vmul.f32	s5, s15, s2
 80071e8:	ee27 3aa0 	vmul.f32	s6, s15, s1
 80071ec:	ee67 3a80 	vmul.f32	s7, s15, s0
 80071f0:	ee27 4a88 	vmul.f32	s8, s15, s16
 80071f4:	ee67 4aa1 	vmul.f32	s9, s15, s3
 80071f8:	ee28 5aa7 	vmul.f32	s10, s17, s15
 80071fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007200:	3b01      	subs	r3, #1
 8007202:	ee3b ba02 	vadd.f32	s22, s22, s4
 8007206:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800720a:	eeb0 2a41 	vmov.f32	s4, s2
 800720e:	ee3a aa03 	vadd.f32	s20, s20, s6
 8007212:	eeb0 1a60 	vmov.f32	s2, s1
 8007216:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800721a:	eef0 0a40 	vmov.f32	s1, s0
 800721e:	ee39 9a04 	vadd.f32	s18, s18, s8
 8007222:	eeb0 0a48 	vmov.f32	s0, s16
 8007226:	ee36 6a24 	vadd.f32	s12, s12, s9
 800722a:	eeb0 8a61 	vmov.f32	s16, s3
 800722e:	ee7b ba85 	vadd.f32	s23, s23, s10
 8007232:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007236:	eef0 1a68 	vmov.f32	s3, s17
 800723a:	d1cb      	bne.n	80071d4 <arm_fir_f32+0x35c>
 800723c:	f1be 0e01 	subs.w	lr, lr, #1
 8007240:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 8007244:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 8007248:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 800724c:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 8007250:	ed04 9a04 	vstr	s18, [r4, #-16]
 8007254:	ed04 6a03 	vstr	s12, [r4, #-12]
 8007258:	ed44 ba02 	vstr	s23, [r4, #-8]
 800725c:	ed44 6a01 	vstr	s13, [r4, #-4]
 8007260:	f106 0620 	add.w	r6, r6, #32
 8007264:	f105 0520 	add.w	r5, r5, #32
 8007268:	f104 0420 	add.w	r4, r4, #32
 800726c:	468b      	mov	fp, r1
 800726e:	f47f ae3b 	bne.w	8006ee8 <arm_fir_f32+0x70>
 8007272:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8007276:	e9dd c908 	ldrd	ip, r9, [sp, #32]
 800727a:	9b01      	ldr	r3, [sp, #4]
 800727c:	9800      	ldr	r0, [sp, #0]
 800727e:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 8007282:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 8007286:	eb09 1943 	add.w	r9, r9, r3, lsl #5
 800728a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	9b04      	ldr	r3, [sp, #16]
 8007292:	f013 0607 	ands.w	r6, r3, #7
 8007296:	d026      	beq.n	80072e6 <arm_fir_f32+0x46e>
 8007298:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 800729c:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80072a0:	4633      	mov	r3, r6
 80072a2:	9f00      	ldr	r7, [sp, #0]
 80072a4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80072a8:	4666      	mov	r6, ip
 80072aa:	464d      	mov	r5, r9
 80072ac:	469c      	mov	ip, r3
 80072ae:	f851 3b04 	ldr.w	r3, [r1], #4
 80072b2:	f847 3b04 	str.w	r3, [r7], #4
 80072b6:	ed1f 7a3a 	vldr	s14, [pc, #-232]	@ 80071d0 <arm_fir_f32+0x358>
 80072ba:	b166      	cbz	r6, 80072d6 <arm_fir_f32+0x45e>
 80072bc:	4633      	mov	r3, r6
 80072be:	4644      	mov	r4, r8
 80072c0:	4628      	mov	r0, r5
 80072c2:	ecf0 7a01 	vldmia	r0!, {s15}
 80072c6:	ecf4 6a01 	vldmia	r4!, {s13}
 80072ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80072ce:	3b01      	subs	r3, #1
 80072d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072d4:	d1f5      	bne.n	80072c2 <arm_fir_f32+0x44a>
 80072d6:	4561      	cmp	r1, ip
 80072d8:	eca2 7a01 	vstmia	r2!, {s14}
 80072dc:	f105 0504 	add.w	r5, r5, #4
 80072e0:	d1e5      	bne.n	80072ae <arm_fir_f32+0x436>
 80072e2:	46b4      	mov	ip, r6
 80072e4:	44f1      	add	r9, lr
 80072e6:	9b03      	ldr	r3, [sp, #12]
 80072e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072ec:	ea5f 059c 	movs.w	r5, ip, lsr #2
 80072f0:	685c      	ldr	r4, [r3, #4]
 80072f2:	d01e      	beq.n	8007332 <arm_fir_f32+0x4ba>
 80072f4:	f109 0210 	add.w	r2, r9, #16
 80072f8:	f104 0310 	add.w	r3, r4, #16
 80072fc:	4629      	mov	r1, r5
 80072fe:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8007302:	f843 0c10 	str.w	r0, [r3, #-16]
 8007306:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800730a:	f843 0c0c 	str.w	r0, [r3, #-12]
 800730e:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8007312:	f843 0c08 	str.w	r0, [r3, #-8]
 8007316:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800731a:	f843 0c04 	str.w	r0, [r3, #-4]
 800731e:	3901      	subs	r1, #1
 8007320:	f102 0210 	add.w	r2, r2, #16
 8007324:	f103 0310 	add.w	r3, r3, #16
 8007328:	d1e9      	bne.n	80072fe <arm_fir_f32+0x486>
 800732a:	eb09 1905 	add.w	r9, r9, r5, lsl #4
 800732e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8007332:	f01c 0c03 	ands.w	ip, ip, #3
 8007336:	d00e      	beq.n	8007356 <arm_fir_f32+0x4de>
 8007338:	f8d9 3000 	ldr.w	r3, [r9]
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	f1bc 0c01 	subs.w	ip, ip, #1
 8007342:	d008      	beq.n	8007356 <arm_fir_f32+0x4de>
 8007344:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007348:	6063      	str	r3, [r4, #4]
 800734a:	f1bc 0f01 	cmp.w	ip, #1
 800734e:	bf1c      	itt	ne
 8007350:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 8007354:	60a3      	strne	r3, [r4, #8]
 8007356:	b00b      	add	sp, #44	@ 0x2c
 8007358:	ecbd 8b10 	vpop	{d8-d15}
 800735c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007360:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007364:	eef0 ba66 	vmov.f32	s23, s13
 8007368:	eeb0 6a66 	vmov.f32	s12, s13
 800736c:	eeb0 9a66 	vmov.f32	s18, s13
 8007370:	eef0 9a66 	vmov.f32	s19, s13
 8007374:	eeb0 aa66 	vmov.f32	s20, s13
 8007378:	eef0 aa66 	vmov.f32	s21, s13
 800737c:	eeb0 ba66 	vmov.f32	s22, s13
 8007380:	f102 0120 	add.w	r1, r2, #32
 8007384:	e720      	b.n	80071c8 <arm_fir_f32+0x350>
 8007386:	bf00      	nop

08007388 <memset>:
 8007388:	4402      	add	r2, r0
 800738a:	4603      	mov	r3, r0
 800738c:	4293      	cmp	r3, r2
 800738e:	d100      	bne.n	8007392 <memset+0xa>
 8007390:	4770      	bx	lr
 8007392:	f803 1b01 	strb.w	r1, [r3], #1
 8007396:	e7f9      	b.n	800738c <memset+0x4>

08007398 <__libc_init_array>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	4d0d      	ldr	r5, [pc, #52]	@ (80073d0 <__libc_init_array+0x38>)
 800739c:	4c0d      	ldr	r4, [pc, #52]	@ (80073d4 <__libc_init_array+0x3c>)
 800739e:	1b64      	subs	r4, r4, r5
 80073a0:	10a4      	asrs	r4, r4, #2
 80073a2:	2600      	movs	r6, #0
 80073a4:	42a6      	cmp	r6, r4
 80073a6:	d109      	bne.n	80073bc <__libc_init_array+0x24>
 80073a8:	4d0b      	ldr	r5, [pc, #44]	@ (80073d8 <__libc_init_array+0x40>)
 80073aa:	4c0c      	ldr	r4, [pc, #48]	@ (80073dc <__libc_init_array+0x44>)
 80073ac:	f000 f826 	bl	80073fc <_init>
 80073b0:	1b64      	subs	r4, r4, r5
 80073b2:	10a4      	asrs	r4, r4, #2
 80073b4:	2600      	movs	r6, #0
 80073b6:	42a6      	cmp	r6, r4
 80073b8:	d105      	bne.n	80073c6 <__libc_init_array+0x2e>
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c0:	4798      	blx	r3
 80073c2:	3601      	adds	r6, #1
 80073c4:	e7ee      	b.n	80073a4 <__libc_init_array+0xc>
 80073c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ca:	4798      	blx	r3
 80073cc:	3601      	adds	r6, #1
 80073ce:	e7f2      	b.n	80073b6 <__libc_init_array+0x1e>
 80073d0:	08007568 	.word	0x08007568
 80073d4:	08007568 	.word	0x08007568
 80073d8:	08007568 	.word	0x08007568
 80073dc:	0800756c 	.word	0x0800756c

080073e0 <memcpy>:
 80073e0:	440a      	add	r2, r1
 80073e2:	4291      	cmp	r1, r2
 80073e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073e8:	d100      	bne.n	80073ec <memcpy+0xc>
 80073ea:	4770      	bx	lr
 80073ec:	b510      	push	{r4, lr}
 80073ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073f6:	4291      	cmp	r1, r2
 80073f8:	d1f9      	bne.n	80073ee <memcpy+0xe>
 80073fa:	bd10      	pop	{r4, pc}

080073fc <_init>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	bf00      	nop
 8007400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007402:	bc08      	pop	{r3}
 8007404:	469e      	mov	lr, r3
 8007406:	4770      	bx	lr

08007408 <_fini>:
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	bf00      	nop
 800740c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740e:	bc08      	pop	{r3}
 8007410:	469e      	mov	lr, r3
 8007412:	4770      	bx	lr
